diff --git a/src/global.c b/src/global.c
index 5af35aa62b..be5e9777b4 100644
--- a/src/global.c
+++ b/src/global.c
@@ -141,21 +141,14 @@ static void shutdown_common(void)
  */
 #if defined(GIT_THREADS) && defined(GIT_WIN32)
 
-static DWORD _fls_index;
+static DWORD _tls_index;
 static volatile LONG _mutex = 0;
 
-static void WINAPI fls_free(void *st)
-{
-	git__global_state_cleanup(st);
-	git__free(st);
-}
-
 static int synchronized_threads_init(void)
 {
 	int error;
 
-	if ((_fls_index = FlsAlloc(fls_free)) == FLS_OUT_OF_INDEXES)
-		return -1;
+	_tls_index = TlsAlloc();
 
 	git_threads_init();
 
@@ -197,7 +190,9 @@ int git_libgit2_shutdown(void)
 	if ((ret = git_atomic_dec(&git__n_inits)) == 0) {
 		shutdown_common();
 
-		FlsFree(_fls_index);
+		git__free_tls_data();
+
+		TlsFree(_tls_index);
 		git_mutex_free(&git__mwindow_mutex);
 
 #if defined(GIT_MSVC_CRTDBG)
@@ -218,7 +213,7 @@ git_global_st *git__global_state(void)
 
 	assert(git_atomic_get(&git__n_inits) > 0);
 
-	if ((ptr = FlsGetValue(_fls_index)) != NULL)
+	if ((ptr = TlsGetValue(_tls_index)) != NULL)
 		return ptr;
 
 	ptr = git__calloc(1, sizeof(git_global_st));
@@ -227,10 +222,25 @@ git_global_st *git__global_state(void)
 
 	git_buf_init(&ptr->error_buf, 0);
 
-	FlsSetValue(_fls_index, ptr);
+	TlsSetValue(_tls_index, ptr);
 	return ptr;
 }
 
+/**
+ * Free the TLS data associated with this thread.
+ * This should only be used by the thread as it
+ * is exiting.
+ */
+void git__free_tls_data(void) {
+    void *ptr = TlsGetValue(_tls_index);
+    if(!ptr)
+	return;
+
+    git__global_state_cleanup(ptr);
+    git__free(ptr);
+    TlsSetValue(_tls_index, NULL);
+}
+
 #elif defined(GIT_THREADS) && defined(_POSIX_THREADS)
 
 static pthread_key_t _tls_key;
diff --git a/src/global.h b/src/global.h
index db41dad1fc..3c0559c688 100644
--- a/src/global.h
+++ b/src/global.h
@@ -35,6 +35,8 @@ typedef void (*git_global_shutdown_fn)(void);
 
 extern void git__on_shutdown(git_global_shutdown_fn callback);
 
+extern void git__free_tls_data(void);
+
 extern const char *git_libgit2__user_agent(void);
 extern const char *git_libgit2__ssl_ciphers(void);
 
diff --git a/src/path.c b/src/path.c
index 625b95c0da..6ec6227795 100644
--- a/src/path.c
+++ b/src/path.c
@@ -1191,7 +1191,7 @@ int git_path_direach(
 	return error;
 }
 
-#if defined(GIT_WIN32) && !defined(__MINGW32__)
+#if defined(GIT_WIN32) && defined(__MINGW32__)
 
 /* Using _FIND_FIRST_EX_LARGE_FETCH may increase performance in Windows 7
  * and better.
diff --git a/src/path.h b/src/path.h
index ed6b93574f..d2d85cfe51 100644
--- a/src/path.h
+++ b/src/path.h
@@ -456,7 +456,7 @@ extern bool git_path_does_fs_decompose_unicode(const char *root);
 
 typedef struct git_path_diriter git_path_diriter;
 
-#if defined(GIT_WIN32) && !defined(__MINGW32__)
+#if defined(GIT_WIN32) && defined(__MINGW32__)
 
 struct git_path_diriter
 {
diff --git a/src/util.h b/src/util.h
index b49850d23a..10ce0f36d2 100644
--- a/src/util.h
+++ b/src/util.h
@@ -357,9 +357,22 @@ GIT_INLINE(void) git__memzero(void *data, size_t size)
 
 GIT_INLINE(double) git__timer(void)
 {
-	/* GetTickCount64 returns the number of milliseconds that have
-	 * elapsed since the system was started. */
-	return (double) GetTickCount64() / (double) 1000;
+    /* We need the initial tick count to detect if the tick
+     * count has rolled over. */
+    static DWORD initial_tick_count = 0;
+
+    /* GetTickCount returns the number of milliseconds that have
+     * elapsed since the system was started. */
+    DWORD count = GetTickCount();
+
+    if(initial_tick_count == 0) {
+	initial_tick_count = count;
+    } else if(count < initial_tick_count) {
+	/* The tick count has rolled over - adjust for it. */
+	count = (0xFFFFFFFF - initial_tick_count) + count;
+    }
+
+    return (double)count / (double)1000;
 }
 
 #elif __APPLE__
diff --git a/src/win32/posix_w32.c b/src/win32/posix_w32.c
index cacf986e8b..c184a9cdf6 100644
--- a/src/win32/posix_w32.c
+++ b/src/win32/posix_w32.c
@@ -43,6 +43,9 @@
  */
 #define WIN32_MODE_MASK (_S_IREAD | _S_IWRITE)
 
+ /* GetFinalPathNameByHandleW signature */
+typedef DWORD(WINAPI *PFGetFinalPathNameByHandleW)(HANDLE, LPWSTR, DWORD, DWORD);
+
 unsigned long git_win32__createfile_sharemode =
  FILE_SHARE_READ | FILE_SHARE_WRITE;
 int git_win32__retries = 10;
@@ -436,28 +439,7 @@ static bool target_is_dir(const char *target, const char *path)
 
 int p_symlink(const char *target, const char *path)
 {
-	git_win32_path target_w, path_w;
-	DWORD dwFlags;
-
-	/*
-	 * Convert both target and path to Windows-style paths. Note that we do
-	 * not want to use `git_win32_path_from_utf8` for converting the target,
-	 * as that function will automatically pre-pend the current working
-	 * directory in case the path is not absolute. As Git will instead use
-	 * relative symlinks, this is not someting we want.
-	 */
-	if (git_win32_path_from_utf8(path_w, path) < 0 ||
-	    git_win32_path_relative_from_utf8(target_w, target) < 0)
-		return -1;
-
-	dwFlags = SYMBOLIC_LINK_FLAG_ALLOW_UNPRIVILEGED_CREATE;
-	if (target_is_dir(target, path))
-		dwFlags |= SYMBOLIC_LINK_FLAG_DIRECTORY;
-
-	if (!CreateSymbolicLinkW(path_w, target_w, dwFlags))
-		return -1;
-
-	return 0;
+    return git_futils_fake_symlink(target, path);
 }
 
 struct open_opts {
@@ -657,13 +639,40 @@ int p_getcwd(char *buffer_out, size_t size)
 	return 0;
 }
 
+/*
+ * Returns the address of the GetFinalPathNameByHandleW function.
+ * This function is available on Windows Vista and higher.
+ */
+static PFGetFinalPathNameByHandleW get_fpnbyhandle(void) {
+    static PFGetFinalPathNameByHandleW pFunc = NULL;
+    PFGetFinalPathNameByHandleW toReturn = pFunc;
+
+    if(!toReturn) {
+	HMODULE hModule = GetModuleHandleW(L"kernel32");
+
+	if(hModule)
+	    toReturn = (PFGetFinalPathNameByHandleW)GetProcAddress(hModule, "GetFinalPathNameByHandleW");
+
+	pFunc = toReturn;
+    }
+
+    assert(toReturn);
+
+    return toReturn;
+}
+
+
 static int getfinalpath_w(
 	git_win32_path dest,
 	const wchar_t *path)
 {
+    PFGetFinalPathNameByHandleW pgfp = get_fpnbyhandle();
 	HANDLE hFile;
 	DWORD dwChars;
 
+	if(!pgfp)
+	    return -1;
+
 	/* Use FILE_FLAG_BACKUP_SEMANTICS so we can open a directory. Do not
 	* specify FILE_FLAG_OPEN_REPARSE_POINT; we want to open a handle to the
 	* target of the link. */
@@ -674,7 +683,7 @@ static int getfinalpath_w(
 		return -1;
 
 	/* Call GetFinalPathNameByHandle */
-	dwChars = GetFinalPathNameByHandleW(hFile, dest, GIT_WIN_PATH_UTF16, FILE_NAME_NORMALIZED);
+	dwChars = pgfp(hFile, dest, GIT_WIN_PATH_UTF16, FILE_NAME_NORMALIZED);
 	CloseHandle(hFile);
 
 	if (!dwChars || dwChars >= GIT_WIN_PATH_UTF16)
diff --git a/src/win32/thread.c b/src/win32/thread.c
index 42dba7f974..c3a6c0e281 100644
--- a/src/win32/thread.c
+++ b/src/win32/thread.c
@@ -32,6 +32,8 @@ static DWORD WINAPI git_win32__threadproc(LPVOID lpParameter)
 
 	thread->result = thread->proc(thread->param);
 
+	git__free_tls_data();
+
 	return CLEAN_THREAD_EXIT;
 }
 
@@ -101,6 +103,9 @@ void git_thread_exit(void *value)
 {
 	assert(GIT_GLOBAL->current_thread);
 	GIT_GLOBAL->current_thread->result = value;
+
+	git__free_tls_data();
+
 	ExitThread(CLEAN_THREAD_EXIT);
 }
 
diff --git a/src/win32/utf-conv.c b/src/win32/utf-conv.c
index 4bde3023ab..a4f3c34d41 100644
--- a/src/win32/utf-conv.c
+++ b/src/win32/utf-conv.c
@@ -36,6 +36,19 @@ int git__utf8_to_16(wchar_t *dest, size_t dest_size, const char *src)
 	return len;
 }
 
+GIT_INLINE(DWORD) get_wc_flags(void) {
+    static char inited = 0;
+    static DWORD flags;
+
+    /* Invalid code point check supported on Vista+ only */
+    if(!inited) {
+	flags = git_has_win32_version(6, 0, 0) ? WC_ERR_INVALID_CHARS : 0;
+	inited = 1;
+    }
+
+    return flags;
+}
+
 /**
  * Converts a wide string to UTF-8.
  *
@@ -51,7 +64,7 @@ int git__utf16_to_8(char *dest, size_t dest_size, const wchar_t *src)
 	/* Length of -1 indicates NULL termination of the input string. Subtract 1 from the result to
 	 * turn 0 into -1 (an error code) and to not count the NULL terminator as part of the string's
 	 * length. WideCharToMultiByte never returns int's minvalue, so underflow is not possible */
-	if ((len = WideCharToMultiByte(CP_UTF8, WC_ERR_INVALID_CHARS, src, -1, dest, (int)dest_size, NULL, NULL) - 1) < 0)
+	if ((len = WideCharToMultiByte(CP_UTF8, get_wc_flags(), src, -1, dest, (int)dest_size, NULL, NULL) - 1) < 0)
 		git__set_errno();
 
 	return len;
@@ -112,11 +125,12 @@ int git__utf8_to_16_alloc(wchar_t **dest, const char *src)
 int git__utf16_to_8_alloc(char **dest, const wchar_t *src)
 {
 	int utf8_size;
+	DWORD dwFlags = get_wc_flags();
 
 	*dest = NULL;
 
 	/* Length of -1 indicates NULL termination of the input string */
-	utf8_size = WideCharToMultiByte(CP_UTF8, WC_ERR_INVALID_CHARS, src, -1, NULL, 0, NULL, NULL);
+	utf8_size = WideCharToMultiByte(CP_UTF8, dwFlags, src, -1, NULL, 0, NULL, NULL);
 
 	if (!utf8_size) {
 		git__set_errno();
@@ -130,7 +144,7 @@ int git__utf16_to_8_alloc(char **dest, const wchar_t *src)
 		return -1;
 	}
 
-	utf8_size = WideCharToMultiByte(CP_UTF8, WC_ERR_INVALID_CHARS, src, -1, *dest, utf8_size, NULL, NULL);
+	utf8_size = WideCharToMultiByte(CP_UTF8, dwFlags, src, -1, *dest, utf8_size, NULL, NULL);
 
 	if (!utf8_size) {
 		git__set_errno();
