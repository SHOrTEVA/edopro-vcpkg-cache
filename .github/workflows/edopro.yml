name: EDOPro dependencies
on: push
jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
    - name: Create release
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref }}
        draft: false
        prerelease: false

  x86-windows-static:
    runs-on: windows-2016
    needs: create-release
    steps:
    - uses: actions/checkout@v1
      if: contains(github.event.head_commit.message, '[skip-win]') != true
      with:
        fetch-depth: 1
    - name: Download 1-latest release's json
      shell: bash
      if: (contains(github.event.head_commit.message, '[skip-win]') != true && startsWith(github.ref, 'refs/tags/') && contains(github.event.head_commit.message, '[new]') != true)
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o tmp.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases
        echo "$(node -e "console.log(JSON.stringify(JSON.parse(require('fs').readFileSync('./tmp.json'))[1]))")" >> previous.json
        rm -f tmp.json
    - name: Download latest release's json
      shell: bash
      if: (contains(github.event.head_commit.message, '[skip-win]') != true && startsWith(github.ref, 'refs/tags/') != true && contains(github.event.head_commit.message, '[new]') != true)
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o previous.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases/latest
    - name: Download cached archive
      shell: bash
      if: (contains(github.event.head_commit.message, '[skip-win]') != true && contains(github.event.head_commit.message, '[new]') != true)
      run: |
        curl -O -J -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/octet-stream" "$(node -e "JSON.parse(require('fs').readFileSync('./previous.json'))['assets'].forEach(function(obj){if(obj['name']=='installed_x86-windows-static.zip'){ console.log(obj['url']) }})")"
    - name: Customize vcpkg
      if: contains(github.event.head_commit.message, '[skip-win]') != true
      shell: bash
      run: |
        cd $VCPKG_INSTALLATION_ROOT
        echo -e "\nset(VCPKG_PLATFORM_TOOLSET v141)" >> triplets/community/x86-windows-static.cmake
    - name: Extract vcpkg cache
      if: (contains(github.event.head_commit.message, '[skip-win]') != true && contains(github.event.head_commit.message, '[new]') != true)
      shell: bash
      run: |
        dir=$PWD
        cd $VCPKG_INSTALLATION_ROOT
        "$PROGRAMFILES/7-Zip/7z.exe" x $dir/installed_x86-windows-static.zip -aos
        cd $dir
        rm -f installed_x86-windows-static.zip
    - name: Upgrade vcpkg dependencies
      if: contains(github.event.head_commit.message, '[skip-win]') != true
      run: |
        vcpkg upgrade --overlay-ports=ports --no-dry-run
    - name: Install dependencies
      if: contains(github.event.head_commit.message, '[skip-win]') != true
      shell: bash
      run: |
        vcpkg install --triplet x86-windows-static \
          --overlay-ports=ports \
          lua[cpp] \
          libevent sqlite3 \
          bzip2 libjpeg-turbo libpng zlib \
          curl[openssl] openssl libgit2-win32openssl[openssl] fmt nlohmann-json \
          openal-soft \
          libflac libvorbis \
          discord-rpc-payload
    - name: Zip binaries
      if: contains(github.event.head_commit.message, '[skip-win]') != true
      shell: bash
      run: |
        cd $VCPKG_INSTALLATION_ROOT
        "$PROGRAMFILES/7-Zip/7z.exe" a -tzip installed_x86-windows-static.zip installed scripts .vcpkg-root vcpkg.exe
    - name: Get upload endpoint
      id: get_endpoint
      if: (contains(github.event.head_commit.message, '[skip-win]') != true && startsWith(github.ref, 'refs/tags/'))
      shell: bash
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o latest.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases/latest
        echo ::set-output name=upload_url::$(node -e "console.log(JSON.parse(require('fs').readFileSync('./latest.json'))['upload_url'])")
        echo ::set-output name=asset_path::$VCPKG_INSTALLATION_ROOT/installed_x86-windows-static.zip
    - name: Upload binaries to GitHub
      if: (contains(github.event.head_commit.message, '[skip-win]') != true && startsWith(github.ref, 'refs/tags/'))
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_endpoint.outputs.upload_url }}
        asset_path: ${{ steps.get_endpoint.outputs.asset_path }}
        asset_name: installed_x86-windows-static.zip
        asset_content_type: application/zip

  x86-windows-static-passthrough:
    runs-on: windows-2016
    needs: create-release
    steps:
    - name: Download 1-latest release's json
      shell: bash
      if: (contains(github.event.head_commit.message, '[skip-win]') && startsWith(github.ref, 'refs/tags/'))
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o tmp.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases
        echo "$(node -e "console.log(JSON.stringify(JSON.parse(require('fs').readFileSync('./tmp.json'))[1]))")" >> previous.json
        rm -f tmp.json
    - name: Download cached archive
      shell: bash
      if: (contains(github.event.head_commit.message, '[skip-win]') && startsWith(github.ref, 'refs/tags/'))
      run: |
        curl -O -J -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/octet-stream" "$(node -e "JSON.parse(require('fs').readFileSync('./previous.json'))['assets'].forEach(function(obj){if(obj['name']=='installed_x86-windows-static.zip'){ console.log(obj['url']) }})")"
    - name: Get upload endpoint
      id: get_endpoint
      if: (contains(github.event.head_commit.message, '[skip-win]') && startsWith(github.ref, 'refs/tags/'))
      shell: bash
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o latest.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases/latest
        echo ::set-output name=upload_url::$(node -e "console.log(JSON.parse(require('fs').readFileSync('./latest.json'))['upload_url'])")
    - name: Upload binaries to GitHub
      if: (contains(github.event.head_commit.message, '[skip-win]') && startsWith(github.ref, 'refs/tags/'))
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_endpoint.outputs.upload_url }}
        asset_path: ./installed_x86-windows-static.zip
        asset_name: installed_x86-windows-static.zip
        asset_content_type: application/zip

  x86-windows-static-vs2019:
    runs-on: windows-2019
    needs: create-release
    steps:
    - uses: actions/checkout@v1
      if: contains(github.event.head_commit.message, '[skip-win]') != true
      with:
        fetch-depth: 1
    - name: Download 1-latest release's json
      shell: bash
      if: (contains(github.event.head_commit.message, '[skip-win]') != true && startsWith(github.ref, 'refs/tags/') && contains(github.event.head_commit.message, '[new]') != true)
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o tmp.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases
        echo "$(node -e "console.log(JSON.stringify(JSON.parse(require('fs').readFileSync('./tmp.json'))[1]))")" >> previous.json
        rm -f tmp.json
    - name: Download latest release's json
      shell: bash
      if: (contains(github.event.head_commit.message, '[skip-win]') != true && startsWith(github.ref, 'refs/tags/') != true && contains(github.event.head_commit.message, '[new]') != true)
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o previous.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases/latest
    - name: Download cached archive
      shell: bash
      if: (contains(github.event.head_commit.message, '[skip-win]') != true && contains(github.event.head_commit.message, '[new]') != true)
      run: |
        curl -O -J -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/octet-stream" "$(node -e "JSON.parse(require('fs').readFileSync('./previous.json'))['assets'].forEach(function(obj){if(obj['name']=='installed_x86-windows-static-vs2019.zip'){ console.log(obj['url']) }})")"
    - name: Customize vcpkg
      if: contains(github.event.head_commit.message, '[skip-win]') != true
      shell: bash
      run: |
        cd $VCPKG_INSTALLATION_ROOT
        echo -e "\nset(VCPKG_PLATFORM_TOOLSET v142)" >> triplets/community/x86-windows-static.cmake
    - name: Extract vcpkg cache
      if: (contains(github.event.head_commit.message, '[skip-win]') != true && contains(github.event.head_commit.message, '[new]') != true)
      shell: bash
      run: |
        dir=$PWD
        cd $VCPKG_INSTALLATION_ROOT
        "$PROGRAMFILES/7-Zip/7z.exe" x $dir/installed_x86-windows-static-vs2019.zip -aos
        cd $dir
        rm -f installed_x86-windows-static-vs2019.zip
    #vcpkg fails cloning git repositories with the bundled git binaries on windows server 2019
    #remove them from path so that it uses a portable version
    - name: Git workarund
      if: contains(github.event.head_commit.message, '[skip-win]') != true
      shell: bash
      run: |
        mv "C:\Program Files\Git\bin\git.exe" "C:\Program Files\Git\bin\git2.exe"
        mv "C:\Program Files\Git\cmd\git.exe" "C:\Program Files\Git\cmd\git2.exe"
        mv "C:\Program Files\Git\mingw64\bin\git.exe" "C:\Program Files\Git\mingw64\bin\git2.exe"
    - name: Upgrade vcpkg dependencies
      if: contains(github.event.head_commit.message, '[skip-win]') != true
      run: |
        vcpkg upgrade --overlay-ports=ports --no-dry-run
    - name: Install dependencies
      if: contains(github.event.head_commit.message, '[skip-win]') != true
      shell: bash
      run: |
        vcpkg install --triplet x86-windows-static \
          --overlay-ports=ports \
          lua[cpp] \
          libevent sqlite3 \
          bzip2 libjpeg-turbo libpng zlib \
          curl[openssl] openssl libgit2-win32openssl[openssl] fmt nlohmann-json \
          openal-soft \
          libflac libvorbis \
          discord-rpc-payload
    - name: Git workarund restore
      if: contains(github.event.head_commit.message, '[skip-win]') != true
      shell: bash
      run: |
        mv "C:\Program Files\Git\bin\git2.exe" "C:\Program Files\Git\bin\git.exe"
        mv "C:\Program Files\Git\cmd\git2.exe" "C:\Program Files\Git\cmd\git.exe"
        mv "C:\Program Files\Git\mingw64\bin\git2.exe" "C:\Program Files\Git\mingw64\bin\git.exe"
    - name: Zip binaries
      if: contains(github.event.head_commit.message, '[skip-win]') != true
      shell: bash
      run: |
        cd $VCPKG_INSTALLATION_ROOT
        "$PROGRAMFILES/7-Zip/7z.exe" a -tzip installed_x86-windows-static-vs2019.zip installed scripts .vcpkg-root vcpkg.exe
    - name: Get upload endpoint
      id: get_endpoint
      if: (contains(github.event.head_commit.message, '[skip-win]') != true && startsWith(github.ref, 'refs/tags/'))
      shell: bash
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o latest.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases/latest
        echo ::set-output name=upload_url::$(node -e "console.log(JSON.parse(require('fs').readFileSync('./latest.json'))['upload_url'])")
        echo ::set-output name=asset_path::$VCPKG_INSTALLATION_ROOT/installed_x86-windows-static-vs2019.zip
    - name: Upload binaries to GitHub
      if: (contains(github.event.head_commit.message, '[skip-win]') != true && startsWith(github.ref, 'refs/tags/'))
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_endpoint.outputs.upload_url }}
        asset_path: ${{ steps.get_endpoint.outputs.asset_path }}
        asset_name: installed_x86-windows-static-vs2019.zip
        asset_content_type: application/zip

  x86-windows-static-vs2019-passthrough:
    runs-on: windows-2016
    needs: create-release
    steps:
    - name: Download 1-latest release's json
      shell: bash
      if: (contains(github.event.head_commit.message, '[skip-win]') && startsWith(github.ref, 'refs/tags/'))
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o tmp.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases
        echo "$(node -e "console.log(JSON.stringify(JSON.parse(require('fs').readFileSync('./tmp.json'))[1]))")" >> previous.json
        rm -f tmp.json
    - name: Download cached archive
      shell: bash
      if: (contains(github.event.head_commit.message, '[skip-win]') && startsWith(github.ref, 'refs/tags/'))
      run: |
        curl -O -J -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/octet-stream" "$(node -e "JSON.parse(require('fs').readFileSync('./previous.json'))['assets'].forEach(function(obj){if(obj['name']=='installed_x86-windows-static-vs2019.zip'){ console.log(obj['url']) }})")"
    - name: Get upload endpoint
      id: get_endpoint
      if: (contains(github.event.head_commit.message, '[skip-win]') && startsWith(github.ref, 'refs/tags/'))
      shell: bash
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o latest.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases/latest
        echo ::set-output name=upload_url::$(node -e "console.log(JSON.parse(require('fs').readFileSync('./latest.json'))['upload_url'])")
    - name: Upload binaries to GitHub
      if: (contains(github.event.head_commit.message, '[skip-win]') && startsWith(github.ref, 'refs/tags/'))
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_endpoint.outputs.upload_url }}
        asset_path: ./installed_x86-windows-static-vs2019.zip
        asset_name: installed_x86-windows-static-vs2019.zip
        asset_content_type: application/zip

  x86-windows-static-vs2015:
    runs-on: windows-2019
    needs: create-release
    steps:
    - uses: actions/checkout@v1
      if: contains(github.event.head_commit.message, '[skip-win]') != true
      with:
        fetch-depth: 1
    - name: Add Visual Studio 2015 toolset
      run: |
        "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vs_installer.exe" modify --channelId VisualStudio.16.Release --productId Microsoft.VisualStudio.Product.Enterprise -q --add Microsoft.VisualStudio.Component.VC.140
      shell: cmd
    - name: Download 1-latest release's json
      shell: bash
      if: (contains(github.event.head_commit.message, '[skip-win]') != true && startsWith(github.ref, 'refs/tags/') && contains(github.event.head_commit.message, '[new]') != true)
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o tmp.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases
        echo "$(node -e "console.log(JSON.stringify(JSON.parse(require('fs').readFileSync('./tmp.json'))[1]))")" >> previous.json
        rm -f tmp.json
    - name: Download latest release's json
      shell: bash
      if: (contains(github.event.head_commit.message, '[skip-win]') != true && startsWith(github.ref, 'refs/tags/') != true && contains(github.event.head_commit.message, '[new]') != true)
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o previous.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases/latest
    - name: Download cached archive
      shell: bash
      if: (contains(github.event.head_commit.message, '[skip-win]') != true && contains(github.event.head_commit.message, '[new]') != true)
      run: |
        curl -O -J -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/octet-stream" "$(node -e "JSON.parse(require('fs').readFileSync('./previous.json'))['assets'].forEach(function(obj){if(obj['name']=='installed_x86-windows-static-vs2015.zip'){ console.log(obj['url']) }})")"
    - name: Customize vcpkg
      if: contains(github.event.head_commit.message, '[skip-win]') != true
      shell: bash
      run: |
        cd $VCPKG_INSTALLATION_ROOT
        echo -e "\nset(VCPKG_PLATFORM_TOOLSET v140)" >> triplets/community/x86-windows-static.cmake
    - name: Extract vcpkg cache
      if: (contains(github.event.head_commit.message, '[skip-win]') != true && contains(github.event.head_commit.message, '[new]') != true)
      shell: bash
      run: |
        dir=$PWD
        cd $VCPKG_INSTALLATION_ROOT
        "$PROGRAMFILES/7-Zip/7z.exe" x $dir/installed_x86-windows-static-vs2015.zip -aos
        cd $dir
        rm -f installed_x86-windows-static-vs2015.zip
    - name: Force vs2019 generator
      if: contains(github.event.head_commit.message, '[skip-win]') != true
      shell: bash
      run: |
        rm ./ports/libssh2/portfile.cmake
        mv ./ports/libssh2/portfilevs2015.cmake ./ports/libssh2/portfile.cmake
        rm ./ports/openal-soft/portfile.cmake
        mv ./ports/openal-soft/portfilevs2015.cmake ./ports/openal-soft/portfile.cmake
    #vcpkg fails cloning git repositories with the bundled git binaries on windows server 2019
    #remove them from path so that it uses a portable version
    - name: Git workarund
      if: contains(github.event.head_commit.message, '[skip-win]') != true
      shell: bash
      run: |
        mv "C:\Program Files\Git\bin\git.exe" "C:\Program Files\Git\bin\git2.exe"
        mv "C:\Program Files\Git\cmd\git.exe" "C:\Program Files\Git\cmd\git2.exe"
        mv "C:\Program Files\Git\mingw64\bin\git.exe" "C:\Program Files\Git\mingw64\bin\git2.exe"
    - name: Upgrade vcpkg dependencies
      if: contains(github.event.head_commit.message, '[skip-win]') != true
      run: |
        vcpkg upgrade --overlay-ports=ports --no-dry-run
    - name: Install dependencies
      if: contains(github.event.head_commit.message, '[skip-win]') != true
      shell: bash
      run: |
        vcpkg install --triplet x86-windows-static \
          --overlay-ports=ports \
          lua[cpp] \
          libevent sqlite3 \
          bzip2 libjpeg-turbo libpng zlib \
          curl[openssl] openssl libgit2-win32openssl[openssl] fmt nlohmann-json \
          openal-soft \
          libflac libvorbis \
          discord-rpc-payload
    - name: Git workarund restore
      if: contains(github.event.head_commit.message, '[skip-win]') != true
      shell: bash
      run: |
        mv "C:\Program Files\Git\bin\git2.exe" "C:\Program Files\Git\bin\git.exe"
        mv "C:\Program Files\Git\cmd\git2.exe" "C:\Program Files\Git\cmd\git.exe"
        mv "C:\Program Files\Git\mingw64\bin\git2.exe" "C:\Program Files\Git\mingw64\bin\git.exe"
    - name: Zip binaries
      if: contains(github.event.head_commit.message, '[skip-win]') != true
      shell: bash
      run: |
        cd $VCPKG_INSTALLATION_ROOT
        "$PROGRAMFILES/7-Zip/7z.exe" a -tzip installed_x86-windows-static-vs2015.zip installed scripts .vcpkg-root vcpkg.exe
    - name: Get upload endpoint
      id: get_endpoint
      if: (contains(github.event.head_commit.message, '[skip-win]') != true && startsWith(github.ref, 'refs/tags/'))
      shell: bash
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o latest.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases/latest
        echo ::set-output name=upload_url::$(node -e "console.log(JSON.parse(require('fs').readFileSync('./latest.json'))['upload_url'])")
        echo ::set-output name=asset_path::$VCPKG_INSTALLATION_ROOT/installed_x86-windows-static-vs2015.zip
    - name: Upload binaries to GitHub
      if: (contains(github.event.head_commit.message, '[skip-win]') != true && startsWith(github.ref, 'refs/tags/'))
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_endpoint.outputs.upload_url }}
        asset_path: ${{ steps.get_endpoint.outputs.asset_path }}
        asset_name: installed_x86-windows-static-vs2015.zip
        asset_content_type: application/zip

  x86-windows-static-vs2015-passthrough:
    runs-on: windows-2019
    needs: create-release
    steps:
    - name: Download 1-latest release's json
      shell: bash
      if: (contains(github.event.head_commit.message, '[skip-win]') && startsWith(github.ref, 'refs/tags/'))
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o tmp.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases
        echo "$(node -e "console.log(JSON.stringify(JSON.parse(require('fs').readFileSync('./tmp.json'))[1]))")" >> previous.json
        rm -f tmp.json
    - name: Download cached archive
      shell: bash
      if: (contains(github.event.head_commit.message, '[skip-win]') && startsWith(github.ref, 'refs/tags/'))
      run: |
        curl -O -J -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/octet-stream" "$(node -e "JSON.parse(require('fs').readFileSync('./previous.json'))['assets'].forEach(function(obj){if(obj['name']=='installed_x86-windows-static-vs2015.zip'){ console.log(obj['url']) }})")"
    - name: Get upload endpoint
      id: get_endpoint
      if: (contains(github.event.head_commit.message, '[skip-win]') && startsWith(github.ref, 'refs/tags/'))
      shell: bash
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o latest.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases/latest
        echo ::set-output name=upload_url::$(node -e "console.log(JSON.parse(require('fs').readFileSync('./latest.json'))['upload_url'])")
    - name: Upload binaries to GitHub
      if: (contains(github.event.head_commit.message, '[skip-win]') && startsWith(github.ref, 'refs/tags/'))
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_endpoint.outputs.upload_url }}
        asset_path: ./installed_x86-windows-static-vs2015.zip
        asset_name: installed_x86-windows-static-vs2015.zip
        asset_content_type: application/zip

  x64-osx:
    runs-on: macos-latest
    needs: create-release
    env:
      DEVELOPER_DIR: /Applications/Xcode_11.7.app/Contents/Developer
      MACOSX_DEPLOYMENT_TARGET: 10.11
      SDKROOT: /Applications/Xcode_11.7.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk
    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 1
    - name: Download 1-latest release's json
      shell: bash
      if: (contains(github.event.head_commit.message, '[skip-osx]') != true && startsWith(github.ref, 'refs/tags/') && contains(github.event.head_commit.message, '[new]') != true)
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o tmp.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases
        echo "$(node -e "console.log(JSON.stringify(JSON.parse(require('fs').readFileSync('./tmp.json'))[1]))")" >> previous.json
        rm -f tmp.json
    - name: Download latest release's json
      shell: bash
      if: (contains(github.event.head_commit.message, '[skip-osx]') != true && startsWith(github.ref, 'refs/tags/') != true && contains(github.event.head_commit.message, '[new]') != true)
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o previous.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases/latest
    - name: Download cached archive
      shell: bash
      if: (contains(github.event.head_commit.message, '[skip-osx]') != true && contains(github.event.head_commit.message, '[new]') != true)
      run: |
        curl -O -J -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/octet-stream" "$(node -e "JSON.parse(require('fs').readFileSync('./previous.json'))['assets'].forEach(function(obj){if(obj['name']=='installed_x64-osx.7z'){ console.log(obj['url']) }})")"
    - name: Install 10.11 SDK
      if: contains(github.event.head_commit.message, '[skip-osx]') != true
      run: |
        curl --retry 5 --connect-timeout 30 --location --remote-header-name --remote-name \
          https://raw.githubusercontent.com/edo9300/ygopro/master/travis/get-osx-sdk.sh
        chmod +x get-osx-sdk.sh
        ./get-osx-sdk.sh $MACOSX_DEPLOYMENT_TARGET
    #needed to build mpg123
    # - name: Install Homebrew prerequisites
      # if: contains(github.event.head_commit.message, '[skip-osx]') != true
      # run: |
        # brew install yasm
    - name: Extract vcpkg cache
      if: (contains(github.event.head_commit.message, '[skip-osx]') != true && contains(github.event.head_commit.message, '[new]') != true)
      run: |
        dir=$PWD
        cd $VCPKG_INSTALLATION_ROOT
        7z x $dir/installed_x64-osx.7z -aos
        cd $dir
        rm -f installed_x64-osx.7z
    - name: Upgrade vcpkg dependencies
      if: contains(github.event.head_commit.message, '[skip-osx]') != true
      run: |
        vcpkg upgrade --overlay-ports=ports --no-dry-run
    # - name: Build patched Irrlicht
      # if: (contains(github.event.head_commit.message, '[skip-osx]') != true && (contains(github.event.head_commit.message, '[do-irr]') || contains(github.event.head_commit.message, '[new]')))
      # run: |
        # curl --retry 5 --connect-timeout 30 --location --remote-header-name --remote-name \
          # https://github.com/edo9300/irrlicht1-8-4/archive/master.zip
        # 7z x irrlicht1-8-4-master.zip
        # cd irrlicht1-8-4-master
        # xcodebuild -project source/Irrlicht/MacOSX/MacOSX.xcodeproj -configuration Release -target libIrrlicht.a SYMROOT=build -sdk $SDKROOT -parallelizeTargets
        # rm -r -f $VCPKG_INSTALLATION_ROOT/irrlicht
        # mkdir -p ../irrlicht/lib
        # cp -r include ../irrlicht/include
    - name: Build patched Irrlicht 1.9
      if: (contains(github.event.head_commit.message, '[skip-osx]') != true && (contains(github.event.head_commit.message, '[do-irr]') || contains(github.event.head_commit.message, '[new]')))
      run: |
        curl --retry 5 --connect-timeout 30 --location --remote-header-name --remote-name \
          https://github.com/edo9300/irrlicht1-8-4/archive/1.9-custom.zip
        7z x irrlicht1-8-4-1.9-custom.zip
        cd irrlicht1-8-4-1.9-custom
        xcodebuild -project source/Irrlicht/Irrlicht.xcodeproj -configuration Release -target Irrlicht_OSX SYMROOT=build -sdk $SDKROOT -parallelizeTargets
        rm -r -f $VCPKG_INSTALLATION_ROOT/irrlicht
        mkdir -p ../irrlicht/lib
        cp -r include ../irrlicht/include
        cp source/Irrlicht/build/Release/libIrrlicht.a ../irrlicht/lib
    # - name: Install SDL2 from vcpkg 
      # if: contains(github.event.head_commit.message, '[skip-osx]') != true
      # env:
        # SDKROOT: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk
      # run: |
        # vcpkg install sdl2
    - name: Install vcpkg dependencies
      if: contains(github.event.head_commit.message, '[skip-osx]') != true
      run: |
        vcpkg install --overlay-ports=ports \
          libevent openssl libgit2 \
          openal-soft \
          libflac libvorbis \
          fmt nlohmann-json \
          discord-rpc-payload
    - name: 7-Zip binaries
      if: contains(github.event.head_commit.message, '[skip-osx]') != true
      run: |
        mv irrlicht $VCPKG_INSTALLATION_ROOT || true
        cd $VCPKG_INSTALLATION_ROOT
        7z a installed_x64-osx.7z installed scripts .vcpkg-root irrlicht
    - name: Get upload endpoint
      id: get_endpoint
      if: (contains(github.event.head_commit.message, '[skip-osx]') != true && startsWith(github.ref, 'refs/tags/'))
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o latest.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases/latest
        echo ::set-output name=upload_url::$(node -e "console.log(JSON.parse(require('fs').readFileSync('./latest.json'))['upload_url'])")
        echo ::set-output name=asset_path::$VCPKG_INSTALLATION_ROOT/installed_x64-osx.7z
    - name: Upload binaries to GitHub
      if: (contains(github.event.head_commit.message, '[skip-osx]') != true && startsWith(github.ref, 'refs/tags/'))
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_endpoint.outputs.upload_url }}
        asset_path: ${{ steps.get_endpoint.outputs.asset_path }}
        asset_name: installed_x64-osx.7z
        asset_content_type: application/x-7z-compressed

  x64-osx-passthrough:
    runs-on: macos-latest
    needs: create-release
    steps:
    - name: Download 1-latest release's json
      shell: bash
      if: (contains(github.event.head_commit.message, '[skip-osx]') && startsWith(github.ref, 'refs/tags/'))
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o tmp.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases
        echo "$(node -e "console.log(JSON.stringify(JSON.parse(require('fs').readFileSync('./tmp.json'))[1]))")" >> previous.json
        rm -f tmp.json
    - name: Download cached archive
      shell: bash
      if: (contains(github.event.head_commit.message, '[skip-osx]') && startsWith(github.ref, 'refs/tags/'))
      run: |
        curl -O -J -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/octet-stream" "$(node -e "JSON.parse(require('fs').readFileSync('./previous.json'))['assets'].forEach(function(obj){if(obj['name']=='installed_x64-osx.7z'){ console.log(obj['url']) }})")"
    - name: Get upload endpoint
      id: get_endpoint
      if: (contains(github.event.head_commit.message, '[skip-osx]') && startsWith(github.ref, 'refs/tags/'))
      shell: bash
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o latest.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases/latest
        echo ::set-output name=upload_url::$(node -e "console.log(JSON.parse(require('fs').readFileSync('./latest.json'))['upload_url'])")
    - name: Upload binaries to GitHub
      if: (contains(github.event.head_commit.message, '[skip-osx]') && startsWith(github.ref, 'refs/tags/'))
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_endpoint.outputs.upload_url }}
        asset_path: ./installed_x64-osx.7z
        asset_name: installed_x64-osx.7z
        asset_content_type: application/zip

  x64-linux:
    runs-on: ubuntu-18.04
    needs: create-release
    steps:
    - uses: actions/checkout@v1
      if: contains(github.event.head_commit.message, '[skip-linux]') != true
      with:
        fetch-depth: 1
    - name: Install APT prerequisities
      if: contains(github.event.head_commit.message, '[skip-linux]') != true
      run: |
        sudo apt-get update
        sudo apt-get install -y yasm libgl1-mesa-dev libasound2-dev libpulse-dev
    - name: Download 1-latest release's json
      if: (contains(github.event.head_commit.message, '[skip-linux]') != true && startsWith(github.ref, 'refs/tags/') && contains(github.event.head_commit.message, '[new]') != true)
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o tmp.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases
        echo "$(node -e "console.log(JSON.stringify(JSON.parse(require('fs').readFileSync('./tmp.json'))[1]))")" >> previous.json
        rm -f tmp.json
    - name: Download latest release's json
      if: (contains(github.event.head_commit.message, '[skip-linux]') != true && startsWith(github.ref, 'refs/tags/') != true && contains(github.event.head_commit.message, '[new]') != true)
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o previous.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases/latest
    - name: Download cached archive
      if: (contains(github.event.head_commit.message, '[skip-linux]') != true && contains(github.event.head_commit.message, '[new]') != true)
      run: |
        curl -O -J -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/octet-stream" "$(node -e "JSON.parse(require('fs').readFileSync('./previous.json'))['assets'].forEach(function(obj){if(obj['name']=='installed_x64-linux.7z'){ console.log(obj['url']) }})")"
    - name: Extract vcpkg cache
      if: (contains(github.event.head_commit.message, '[skip-linux]') != true && contains(github.event.head_commit.message, '[new]') != true)
      run: |
        dir=$PWD
        cd $VCPKG_INSTALLATION_ROOT
        7z x $dir/installed_x64-linux.7z -aos
        cd $dir
        rm -f installed_x64-linux.7z
    - name: Upgrade vcpkg dependencies
      if: contains(github.event.head_commit.message, '[skip-linux]') != true
      run: |
        vcpkg upgrade --overlay-ports=ports --no-dry-run
    - name: Install vcpkg dependencies
      if: contains(github.event.head_commit.message, '[skip-linux]') != true
      run: |
        vcpkg install --overlay-ports=ports \
          libevent sqlite3 \
          irrlicht-rectclip \
          curl openssl libgit2 fmt nlohmann-json \
          openal-soft \
          libflac libvorbis \
          discord-rpc-payload
    - name: 7-Zip binaries
      if: contains(github.event.head_commit.message, '[skip-linux]') != true
      run: |
        cd $VCPKG_INSTALLATION_ROOT
        7z a installed_x64-linux.7z installed scripts .vcpkg-root
    - name: Get upload endpoint
      id: get_endpoint
      if: (contains(github.event.head_commit.message, '[skip-linux]') != true && startsWith(github.ref, 'refs/tags/'))
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o latest.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases/latest
        echo ::set-output name=upload_url::$(node -e "console.log(JSON.parse(require('fs').readFileSync('./latest.json'))['upload_url'])")
        echo ::set-output name=asset_path::$VCPKG_INSTALLATION_ROOT/installed_x64-linux.7z
    - name: Upload binaries to GitHub
      if: (contains(github.event.head_commit.message, '[skip-linux]') != true && startsWith(github.ref, 'refs/tags/'))
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_endpoint.outputs.upload_url }}
        asset_path: ${{ steps.get_endpoint.outputs.asset_path }}
        asset_name: installed_x64-linux.7z
        asset_content_type: application/x-7z-compressed

  x64-linux-passthrough:
    runs-on: ubuntu-18.04
    needs: create-release
    steps:
    - name: Download 1-latest release's json
      if: (contains(github.event.head_commit.message, '[skip-linux]') && startsWith(github.ref, 'refs/tags/'))
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o tmp.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases
        echo "$(node -e "console.log(JSON.stringify(JSON.parse(require('fs').readFileSync('./tmp.json'))[1]))")" >> previous.json
        rm -f tmp.json
    - name: Download cached archive
      if: (contains(github.event.head_commit.message, '[skip-linux]') && startsWith(github.ref, 'refs/tags/'))
      run: |
        curl -O -J -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/octet-stream" "$(node -e "JSON.parse(require('fs').readFileSync('./previous.json'))['assets'].forEach(function(obj){if(obj['name']=='installed_x64-linux.7z'){ console.log(obj['url']) }})")"
    - name: Get upload endpoint
      id: get_endpoint
      if: (contains(github.event.head_commit.message, '[skip-linux]') && startsWith(github.ref, 'refs/tags/'))
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o latest.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases/latest
        echo ::set-output name=upload_url::$(node -e "console.log(JSON.parse(require('fs').readFileSync('./latest.json'))['upload_url'])")
    - name: Upload binaries to GitHub
      if: (contains(github.event.head_commit.message, '[skip-linux]') && startsWith(github.ref, 'refs/tags/'))
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_endpoint.outputs.upload_url }}
        asset_path: ./installed_x64-linux.7z
        asset_name: installed_x64-linux.7z
        asset_content_type: application/x-7z-compressed
