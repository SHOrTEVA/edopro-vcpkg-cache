name: EDOPro dependencies
on: push
jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
    - name: Create release
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref }}
        draft: false
        prerelease: false

  x86-windows-static-vs2017_xp:
    runs-on: windows-2019
    needs: create-release
    if: contains(github.event.head_commit.message, '[skip-win]') != true
    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 1
    - name: Download 1-latest release's json
      shell: bash
      if: (startsWith(github.ref, 'refs/tags/') && contains(github.event.head_commit.message, '[new]') != true && contains(github.event.head_commit.message, '[new-win]') != true)
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o tmp.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases
        echo "$(node -e "console.log(JSON.stringify(JSON.parse(require('fs').readFileSync('./tmp.json'))[1]))")" >> previous.json
        rm -f tmp.json
    - name: Download latest release's json
      shell: bash
      if: (startsWith(github.ref, 'refs/tags/') != true && contains(github.event.head_commit.message, '[new]') != true && contains(github.event.head_commit.message, '[new-win]') != true)
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o previous.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases/latest
    - name: Download cached archive
      shell: bash
      if: (contains(github.event.head_commit.message, '[new]') != true && contains(github.event.head_commit.message, '[new-win]') != true)
      run: |
        curl -O -J -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/octet-stream" "$(node -e "JSON.parse(require('fs').readFileSync('./previous.json'))['assets'].forEach(function(obj){if(obj['name']=='installed_x86-windows-static.zip'){ console.log(obj['url']) }})")"
    - name: Customize vcpkg
      shell: bash
      run: |
        cd $VCPKG_INSTALLATION_ROOT
        echo -e "\nset(VCPKG_PLATFORM_TOOLSET v141)" >> triplets/community/x86-windows-static.cmake
    # vcpkg doesn't like when we pass an _xp toolset to it
    # so make the v141_cp toolset the v141 and pass it to the triplet
    - name: Make v141_xp toolset v141
      shell: bash
      run: |
        cd "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\v150\Platforms\Win32\PlatformToolsets"
        rm -r v141 || true
        mv v141_xp v141
    - name: Set proper windows build tools in path
      uses: ilammy/msvc-dev-cmd@v1
      with:
          arch: win32
          toolset: 14.16.27023
    - name: Extract vcpkg cache
      if: (contains(github.event.head_commit.message, '[new]') != true && contains(github.event.head_commit.message, '[new-win]') != true)
      shell: bash
      run: |
        dir=$PWD
        cd $VCPKG_INSTALLATION_ROOT
        "$PROGRAMFILES/7-Zip/7z.exe" x $dir/installed_x86-windows-static.zip -aos
        cd $dir
        rm -f installed_x86-windows-static.zip
    - name: Force vs2019 generator
      shell: bash
      run: |
        rm ./ports/libssh2/portfile.cmake
        mv ./ports/libssh2/portfile-force-vs2019-generator-2017-toolset.cmake ./ports/libssh2/portfile.cmake
        rm ./ports/openal-soft/portfile.cmake
        mv ./ports/openal-soft/portfile-force-vs2019-generator-2017-toolset.cmake ./ports/openal-soft/portfile.cmake
    - name: Upgrade vcpkg dependencies
      shell: cmd
      run: |
        vcpkg upgrade --overlay-ports=ports --no-dry-run
    - name: Install dependencies
      shell: cmd
      run: |
        vcpkg install --triplet x86-windows-static --overlay-ports=ports liblzma lua[cpp] freetype[bzip2,core,png,zlib] libevent sqlite3 bzip2 libjpeg-turbo libpng zlib curl[openssl] openssl libgit2 fmt nlohmann-json openal-soft libflac libvorbis discord-rpc-payload
    - name: Zip binaries
      shell: bash
      run: |
        cd $VCPKG_INSTALLATION_ROOT
        "$PROGRAMFILES/7-Zip/7z.exe" a -tzip installed_x86-windows-static.zip installed scripts .vcpkg-root vcpkg.exe
    - name: Get upload endpoint
      id: get_endpoint
      if: startsWith(github.ref, 'refs/tags/')
      shell: bash
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o latest.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases/latest
        echo ::set-output name=upload_url::$(node -e "console.log(JSON.parse(require('fs').readFileSync('./latest.json'))['upload_url'])")
        echo ::set-output name=asset_path::$VCPKG_INSTALLATION_ROOT/installed_x86-windows-static.zip
    - name: Upload binaries to GitHub
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_endpoint.outputs.upload_url }}
        asset_path: ${{ steps.get_endpoint.outputs.asset_path }}
        asset_name: installed_x86-windows-static.zip
        asset_content_type: application/zip

  x86-windows-static-vs2017:
    runs-on: windows-2022
    needs: create-release
    if: contains(github.event.head_commit.message, '[skip-win17]') != true
    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 1
    - name: Download 1-latest release's json
      shell: bash
      if: (startsWith(github.ref, 'refs/tags/') && contains(github.event.head_commit.message, '[new]') != true && contains(github.event.head_commit.message, '[new-win17]') != true)
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o tmp.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases
        echo "$(node -e "console.log(JSON.stringify(JSON.parse(require('fs').readFileSync('./tmp.json'))[1]))")" >> previous.json
        rm -f tmp.json
    - name: Download latest release's json
      shell: bash
      if: (startsWith(github.ref, 'refs/tags/') != true && contains(github.event.head_commit.message, '[new]') != true && contains(github.event.head_commit.message, '[new-win17]') != true)
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o previous.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases/latest
    - name: Download cached archive
      shell: bash
      if: (contains(github.event.head_commit.message, '[new]') != true && contains(github.event.head_commit.message, '[new-win17]') != true)
      run: |
        curl -O -J -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/octet-stream" "$(node -e "JSON.parse(require('fs').readFileSync('./previous.json'))['assets'].forEach(function(obj){if(obj['name']=='installed_x86-windows-static-vs2017.zip'){ console.log(obj['url']) }})")"
    - name: Customize vcpkg
      shell: bash
      run: |
        cd $VCPKG_INSTALLATION_ROOT
        echo -e "\nset(VCPKG_PLATFORM_TOOLSET v141)" >> triplets/community/x86-windows-static.cmake
    - name: Set proper windows build tools in path
      uses: ilammy/msvc-dev-cmd@v1
      with:
          arch: win32
          toolset: 14.16.27023
    - name: Extract vcpkg cache
      if: (contains(github.event.head_commit.message, '[new]') != true && contains(github.event.head_commit.message, '[new-win17]') != true)
      shell: bash
      run: |
        dir=$PWD
        cd $VCPKG_INSTALLATION_ROOT
        "$PROGRAMFILES/7-Zip/7z.exe" x $dir/installed_x86-windows-static-vs2017.zip -aos
        cd $dir
        rm -f installed_x86-windows-static-vs2017.zip
    - name: Force vs2022 generator
      shell: bash
      run: |
        rm ./ports/libssh2/portfile.cmake
        mv ./ports/libssh2/portfile-force-vs2022-generator.cmake ./ports/libssh2/portfile.cmake
        rm ./ports/openal-soft/portfile.cmake
        mv ./ports/openal-soft/portfile-force-vs2022-generator.cmake ./ports/openal-soft/portfile.cmake
    - name: Upgrade vcpkg dependencies
      shell: cmd
      run: |
        vcpkg upgrade --overlay-ports=ports --no-dry-run
    - name: Install dependencies
      shell: cmd
      run: |
        vcpkg install --triplet x86-windows-static --overlay-ports=ports liblzma lua[cpp] freetype[bzip2,core,png,zlib] libevent sqlite3 bzip2 libjpeg-turbo libpng zlib curl[openssl] openssl libgit2 fmt nlohmann-json openal-soft libflac libvorbis discord-rpc-payload
    - name: Zip binaries
      shell: bash
      run: |
        cd $VCPKG_INSTALLATION_ROOT
        "$PROGRAMFILES/7-Zip/7z.exe" a -tzip installed_x86-windows-static-vs2017.zip installed scripts .vcpkg-root vcpkg.exe
    - name: Get upload endpoint
      id: get_endpoint
      if: startsWith(github.ref, 'refs/tags/')
      shell: bash
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o latest.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases/latest
        echo ::set-output name=upload_url::$(node -e "console.log(JSON.parse(require('fs').readFileSync('./latest.json'))['upload_url'])")
        echo ::set-output name=asset_path::$VCPKG_INSTALLATION_ROOT/installed_x86-windows-static-vs2017.zip
    - name: Upload binaries to GitHub
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_endpoint.outputs.upload_url }}
        asset_path: ${{ steps.get_endpoint.outputs.asset_path }}
        asset_name: installed_x86-windows-static-vs2017.zip
        asset_content_type: application/zip

  x86-windows-static-vs2022:
    runs-on: windows-2022
    needs: create-release
    if: contains(github.event.head_commit.message, '[skip-win22]') != true
    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 1
    - name: Download 1-latest release's json
      shell: bash
      if: (startsWith(github.ref, 'refs/tags/') && contains(github.event.head_commit.message, '[new]') != true && contains(github.event.head_commit.message, '[new-win22]') != true)
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o tmp.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases
        echo "$(node -e "console.log(JSON.stringify(JSON.parse(require('fs').readFileSync('./tmp.json'))[1]))")" >> previous.json
        rm -f tmp.json
    - name: Download latest release's json
      shell: bash
      if: (startsWith(github.ref, 'refs/tags/') != true && contains(github.event.head_commit.message, '[new]') != true && contains(github.event.head_commit.message, '[new-win22]') != true)
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o previous.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases/latest
    - name: Download cached archive
      shell: bash
      if: (contains(github.event.head_commit.message, '[new]') != true && contains(github.event.head_commit.message, '[new-win22]') != true)
      run: |
        curl -O -J -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/octet-stream" "$(node -e "JSON.parse(require('fs').readFileSync('./previous.json'))['assets'].forEach(function(obj){if(obj['name']=='installed_x86-windows-static-vs2022.zip'){ console.log(obj['url']) }})")"
    - name: Customize vcpkg
      shell: bash
      run: |
        cd $VCPKG_INSTALLATION_ROOT
        echo -e "\nset(VCPKG_PLATFORM_TOOLSET v143)" >> triplets/community/x86-windows-static.cmake
    - name: Extract vcpkg cache
      if: (contains(github.event.head_commit.message, '[new]') != true && contains(github.event.head_commit.message, '[new-win22]') != true)
      shell: bash
      run: |
        dir=$PWD
        cd $VCPKG_INSTALLATION_ROOT
        "$PROGRAMFILES/7-Zip/7z.exe" x $dir/installed_x86-windows-static-vs2022.zip -aos
        cd $dir
        rm -f installed_x86-windows-static-vs2022.zip
    - name: Upgrade vcpkg dependencies
      run: |
        vcpkg upgrade --overlay-ports=ports --no-dry-run
    - name: Install dependencies
      shell: bash
      run: |
        vcpkg install --triplet x86-windows-static \
          --overlay-ports=ports \
          liblzma lua[cpp] freetype[bzip2,core,png,zlib] \
          libevent sqlite3 \
          bzip2 libjpeg-turbo libpng zlib \
          curl[openssl] openssl libgit2 fmt nlohmann-json \
          openal-soft \
          libflac libvorbis \
          discord-rpc-payload
    - name: Zip binaries
      shell: bash
      run: |
        cd $VCPKG_INSTALLATION_ROOT
        "$PROGRAMFILES/7-Zip/7z.exe" a -tzip installed_x86-windows-static-vs2022.zip installed scripts .vcpkg-root vcpkg.exe
    - name: Get upload endpoint
      id: get_endpoint
      if: startsWith(github.ref, 'refs/tags/')
      shell: bash
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o latest.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases/latest
        echo ::set-output name=upload_url::$(node -e "console.log(JSON.parse(require('fs').readFileSync('./latest.json'))['upload_url'])")
        echo ::set-output name=asset_path::$VCPKG_INSTALLATION_ROOT/installed_x86-windows-static-vs2022.zip
    - name: Upload binaries to GitHub
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_endpoint.outputs.upload_url }}
        asset_path: ${{ steps.get_endpoint.outputs.asset_path }}
        asset_name: installed_x86-windows-static-vs2022.zip
        asset_content_type: application/zip

  x86-windows-static-vs2019:
    runs-on: windows-2019
    needs: create-release
    if: contains(github.event.head_commit.message, '[skip-win19]') != true
    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 1
    - name: Download 1-latest release's json
      shell: bash
      if: (startsWith(github.ref, 'refs/tags/') && contains(github.event.head_commit.message, '[new]') != true && contains(github.event.head_commit.message, '[new-win19]') != true)
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o tmp.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases
        echo "$(node -e "console.log(JSON.stringify(JSON.parse(require('fs').readFileSync('./tmp.json'))[1]))")" >> previous.json
        rm -f tmp.json
    - name: Download latest release's json
      shell: bash
      if: (startsWith(github.ref, 'refs/tags/') != true && contains(github.event.head_commit.message, '[new]') != true && contains(github.event.head_commit.message, '[new-win19]') != true)
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o previous.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases/latest
    - name: Download cached archive
      shell: bash
      if: (contains(github.event.head_commit.message, '[new]') != true && contains(github.event.head_commit.message, '[new-win19]') != true)
      run: |
        curl -O -J -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/octet-stream" "$(node -e "JSON.parse(require('fs').readFileSync('./previous.json'))['assets'].forEach(function(obj){if(obj['name']=='installed_x86-windows-static-vs2019.zip'){ console.log(obj['url']) }})")"
    - name: Customize vcpkg
      if: contains(github.event.head_commit.message, '[skip-win]') != true
      shell: bash
      run: |
        cd $VCPKG_INSTALLATION_ROOT
        echo -e "\nset(VCPKG_PLATFORM_TOOLSET v142)" >> triplets/community/x86-windows-static.cmake
    - name: Extract vcpkg cache
      if: (contains(github.event.head_commit.message, '[new]') != true && contains(github.event.head_commit.message, '[new-win19]') != true)
      shell: bash
      run: |
        dir=$PWD
        cd $VCPKG_INSTALLATION_ROOT
        "$PROGRAMFILES/7-Zip/7z.exe" x $dir/installed_x86-windows-static-vs2019.zip -aos
        cd $dir
        rm -f installed_x86-windows-static-vs2019.zip
    - name: Upgrade vcpkg dependencies
      run: |
        vcpkg upgrade --overlay-ports=ports --no-dry-run
    - name: Install dependencies
      shell: bash
      run: |
        vcpkg install --triplet x86-windows-static \
          --overlay-ports=ports \
          liblzma lua[cpp] freetype[bzip2,core,png,zlib] \
          libevent sqlite3 \
          bzip2 libjpeg-turbo libpng zlib \
          curl[openssl] openssl libgit2 fmt nlohmann-json \
          openal-soft \
          libflac libvorbis \
          discord-rpc-payload
    - name: Zip binaries
      shell: bash
      run: |
        cd $VCPKG_INSTALLATION_ROOT
        "$PROGRAMFILES/7-Zip/7z.exe" a -tzip installed_x86-windows-static-vs2019.zip installed scripts .vcpkg-root vcpkg.exe
    - name: Get upload endpoint
      id: get_endpoint
      if: startsWith(github.ref, 'refs/tags/')
      shell: bash
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o latest.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases/latest
        echo ::set-output name=upload_url::$(node -e "console.log(JSON.parse(require('fs').readFileSync('./latest.json'))['upload_url'])")
        echo ::set-output name=asset_path::$VCPKG_INSTALLATION_ROOT/installed_x86-windows-static-vs2019.zip
    - name: Upload binaries to GitHub
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_endpoint.outputs.upload_url }}
        asset_path: ${{ steps.get_endpoint.outputs.asset_path }}
        asset_name: installed_x86-windows-static-vs2019.zip
        asset_content_type: application/zip

  x86-windows-static-vs2015:
    runs-on: windows-2019
    needs: create-release
    if: contains(github.event.head_commit.message, '[skip-win15]') != true
    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 1
    - name: Download 1-latest release's json
      shell: bash
      if: (startsWith(github.ref, 'refs/tags/') && contains(github.event.head_commit.message, '[new]') != true && contains(github.event.head_commit.message, '[new-win15]') != true)
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o tmp.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases
        echo "$(node -e "console.log(JSON.stringify(JSON.parse(require('fs').readFileSync('./tmp.json'))[1]))")" >> previous.json
        rm -f tmp.json
    - name: Download latest release's json
      shell: bash
      if: (startsWith(github.ref, 'refs/tags/') != true && contains(github.event.head_commit.message, '[new]') != true && contains(github.event.head_commit.message, '[new-win15]') != true)
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o previous.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases/latest
    - name: Download cached archive
      shell: bash
      if: (contains(github.event.head_commit.message, '[new]') != true && contains(github.event.head_commit.message, '[new-win15]') != true)
      run: |
        curl -O -J -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/octet-stream" "$(node -e "JSON.parse(require('fs').readFileSync('./previous.json'))['assets'].forEach(function(obj){if(obj['name']=='installed_x86-windows-static-vs2015.zip'){ console.log(obj['url']) }})")"
    - name: Customize vcpkg
      shell: bash
      run: |
        cd $VCPKG_INSTALLATION_ROOT
        echo -e "\nset(VCPKG_PLATFORM_TOOLSET v140)" >> triplets/community/x86-windows-static.cmake
    - name: Set proper windows build tools in path
      uses: ilammy/msvc-dev-cmd@v1
      with:
          arch: win32
          toolset: '14.0'
    - name: Extract vcpkg cache
      if: (contains(github.event.head_commit.message, '[new]') != true && contains(github.event.head_commit.message, '[new-win15]') != true)
      shell: bash
      run: |
        dir=$PWD
        cd $VCPKG_INSTALLATION_ROOT
        "$PROGRAMFILES/7-Zip/7z.exe" x $dir/installed_x86-windows-static-vs2015.zip -aos
        cd $dir
        rm -f installed_x86-windows-static-vs2015.zip
    - name: Force vs2019 generator
      shell: bash
      run: |
        rm ./ports/libssh2/portfile.cmake
        mv ./ports/libssh2/portfile-force-vs2019-generator.cmake ./ports/libssh2/portfile.cmake
        rm -r ./ports/openal-soft
        mv ./ports/openal-soft-vs2015 ./ports/openal-soft
    - name: Upgrade vcpkg dependencies
      shell: cmd
      run: |
        vcpkg upgrade --overlay-ports=ports --no-dry-run
    - name: Install dependencies
      shell: cmd
      run: |
        vcpkg install --triplet x86-windows-static --overlay-ports=ports liblzma lua[cpp] freetype[bzip2,core,png,zlib] libevent sqlite3 bzip2 libjpeg-turbo libpng zlib curl[openssl] openssl libgit2 fmt nlohmann-json openal-soft libflac libvorbis discord-rpc-payload
    - name: Zip binaries
      shell: bash
      run: |
        cd $VCPKG_INSTALLATION_ROOT
        "$PROGRAMFILES/7-Zip/7z.exe" a -tzip installed_x86-windows-static-vs2015.zip installed scripts .vcpkg-root vcpkg.exe
    - name: Get upload endpoint
      id: get_endpoint
      if: startsWith(github.ref, 'refs/tags/')
      shell: bash
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o latest.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases/latest
        echo ::set-output name=upload_url::$(node -e "console.log(JSON.parse(require('fs').readFileSync('./latest.json'))['upload_url'])")
        echo ::set-output name=asset_path::$VCPKG_INSTALLATION_ROOT/installed_x86-windows-static-vs2015.zip
    - name: Upload binaries to GitHub
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_endpoint.outputs.upload_url }}
        asset_path: ${{ steps.get_endpoint.outputs.asset_path }}
        asset_name: installed_x86-windows-static-vs2015.zip
        asset_content_type: application/zip

  x64-osx:
    runs-on: macos-11
    needs: create-release
    if: contains(github.event.head_commit.message, '[skip-osx]') != true
    env:
      DEVELOPER_DIR: /Applications/Xcode_11.7.app/Contents/Developer
      MACOSX_DEPLOYMENT_TARGET: 10.11
      SDKROOT: /Applications/Xcode_11.7.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk
    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 1
    - name: Download 1-latest release's json
      shell: bash
      if: (startsWith(github.ref, 'refs/tags/') && contains(github.event.head_commit.message, '[new]') != true && contains(github.event.head_commit.message, '[new-osx]') != true)
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o tmp.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases
        echo "$(node -e "console.log(JSON.stringify(JSON.parse(require('fs').readFileSync('./tmp.json'))[1]))")" >> previous.json
        rm -f tmp.json
    - name: Download latest release's json
      shell: bash
      if: (startsWith(github.ref, 'refs/tags/') != true && contains(github.event.head_commit.message, '[new]') != true && contains(github.event.head_commit.message, '[new-osx]') != true)
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o previous.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases/latest
    - name: Download cached archive
      shell: bash
      if: (contains(github.event.head_commit.message, '[new]') != true && contains(github.event.head_commit.message, '[new-osx]') != true)
      run: |
        curl -O -J -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/octet-stream" "$(node -e "JSON.parse(require('fs').readFileSync('./previous.json'))['assets'].forEach(function(obj){if(obj['name']=='installed_x64-osx.7z'){ console.log(obj['url']) }})")"
    - name: Install 10.11 SDK
      run: |
        curl --retry 5 --connect-timeout 30 --location --remote-header-name --remote-name \
          https://raw.githubusercontent.com/edo9300/ygopro/master/travis/get-osx-sdk.sh
        chmod +x get-osx-sdk.sh
        ./get-osx-sdk.sh $MACOSX_DEPLOYMENT_TARGET
    #needed to build mpg123
    # - name: Install Homebrew prerequisites
      # run: |
        # brew install yasm
    - name: Extract vcpkg cache
      if: (contains(github.event.head_commit.message, '[new]') != true && contains(github.event.head_commit.message, '[new-osx]') != true)
      run: |
        dir=$PWD
        cd $VCPKG_INSTALLATION_ROOT
        7z x $dir/installed_x64-osx.7z -aos
        cd $dir
        rm -f installed_x64-osx.7z
    - name: Upgrade vcpkg dependencies
      run: |
        vcpkg upgrade --overlay-ports=ports --no-dry-run
    # - name: Build patched Irrlicht
      # if: (contains(github.event.head_commit.message, '[do-irr]') || contains(github.event.head_commit.message, '[new]'))
      # run: |
        # curl --retry 5 --connect-timeout 30 --location --remote-header-name --remote-name \
          # https://github.com/edo9300/irrlicht1-8-4/archive/master.zip
        # 7z x irrlicht1-8-4-master.zip
        # cd irrlicht1-8-4-master
        # xcodebuild -project source/Irrlicht/MacOSX/MacOSX.xcodeproj -configuration Release -target libIrrlicht.a SYMROOT=build -sdk $SDKROOT -parallelizeTargets
        # rm -r -f $VCPKG_INSTALLATION_ROOT/irrlicht
        # mkdir -p ../irrlicht/lib
        # cp -r include ../irrlicht/include
    - name: Build patched Irrlicht 1.9
      if: (contains(github.event.head_commit.message, '[do-irr]') || contains(github.event.head_commit.message, '[new]') || contains(github.event.head_commit.message, '[new-osx]'))
      run: |
        curl --retry 5 --connect-timeout 30 --location --remote-header-name --remote-name \
          https://github.com/edo9300/irrlicht1-8-4/archive/1.9-custom.zip
        7z x irrlicht1-8-4-1.9-custom.zip
        cd irrlicht1-8-4-1.9-custom
        xcodebuild -project source/Irrlicht/Irrlicht.xcodeproj -configuration Release -target Irrlicht_OSX SYMROOT=build -sdk $SDKROOT -parallelizeTargets
        rm -r -f $VCPKG_INSTALLATION_ROOT/installed/x64-osx/include/irrlicht
        mkdir -p $VCPKG_INSTALLATION_ROOT/installed/x64-osx/include
        mkdir -p $VCPKG_INSTALLATION_ROOT/installed/x64-osx/lib
        mkdir -p $VCPKG_INSTALLATION_ROOT/installed/x64-osx/debug/lib
        cp -r include $VCPKG_INSTALLATION_ROOT/installed/x64-osx/include/irrlicht
        cp source/Irrlicht/build/Release/libIrrlicht.a $VCPKG_INSTALLATION_ROOT/installed/x64-osx/lib
        cp source/Irrlicht/build/Release/libIrrlicht.a $VCPKG_INSTALLATION_ROOT/installed/x64-osx/debug/lib
    # - name: Install SDL2 from vcpkg
      # env:
        # SDKROOT: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk
      # run: |
        # vcpkg install sdl2
    - name: Install vcpkg dependencies
      run: |
        vcpkg install --overlay-ports=ports \
          liblzma libevent openssl libgit2 \
          freetype[bzip2,core,png,zlib] \
          openal-soft \
          curl sqlite3 \
          libflac libvorbis \
          fmt nlohmann-json \
          discord-rpc-payload
    - name: 7-Zip binaries
      run: |
        cd $VCPKG_INSTALLATION_ROOT
        7z a installed_x64-osx.7z installed
    - name: Get upload endpoint
      id: get_endpoint
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o latest.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases/latest
        echo ::set-output name=upload_url::$(node -e "console.log(JSON.parse(require('fs').readFileSync('./latest.json'))['upload_url'])")
        echo ::set-output name=asset_path::$VCPKG_INSTALLATION_ROOT/installed_x64-osx.7z
    - name: Upload binaries to GitHub
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_endpoint.outputs.upload_url }}
        asset_path: ${{ steps.get_endpoint.outputs.asset_path }}
        asset_name: installed_x64-osx.7z
        asset_content_type: application/x-7z-compressed

  x64-osx-cctools:
    runs-on: ubuntu-latest
    needs: create-release
    if: contains(github.event.head_commit.message, '[skip-osx-cctools]') != true
    env:
      CC: /opt/cctools/bin/x86_64-macosx-clang
      CXX: /opt/cctools/bin/x86_64-macosx-clang++
      AR: /opt/cctools/bin/x86_64-apple-darwin11-ar
      VCPKG_DEFAULT_TRIPLET: x64-osx-cctools
      VCPKG_OVERLAY_TRIPLETS: triplets
      VCPKG_OVERLAY_PORTS: ports
    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 1
    - name: Download cctools
      run: |
        cd /opt
        wget https://github.com/edo9300/cctools-build/releases/download/preview/cctools.tar.xz
        tar xf cctools.tar.xz
        cd cctools/bin
        ln x86_64-apple-darwin11-lipo -s lipo
        ln llvm-install-name-tool -s install_name_tool
    - name: Download 1-latest release's json
      shell: bash
      if: (startsWith(github.ref, 'refs/tags/') && contains(github.event.head_commit.message, '[new]') != true && contains(github.event.head_commit.message, '[new-osx-cctools]') != true)
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o tmp.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases
        echo "$(node -e "console.log(JSON.stringify(JSON.parse(require('fs').readFileSync('./tmp.json'))[1]))")" >> previous.json
        rm -f tmp.json
    - name: Download latest release's json
      shell: bash
      if: (startsWith(github.ref, 'refs/tags/') != true && contains(github.event.head_commit.message, '[new]') != true && contains(github.event.head_commit.message, '[new-osx-cctools]') != true)
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o previous.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases/latest
    - name: Download cached archive
      shell: bash
      if: (contains(github.event.head_commit.message, '[new]') != true && contains(github.event.head_commit.message, '[new-osx-cctools]') != true)
      run: |
        curl -O -J -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/octet-stream" "$(node -e "JSON.parse(require('fs').readFileSync('./previous.json'))['assets'].forEach(function(obj){if(obj['name']=='installed_x64-osx-cctools.7z'){ console.log(obj['url']) }})")"
    - name: Extract vcpkg cache
      if: (contains(github.event.head_commit.message, '[new]') != true && contains(github.event.head_commit.message, '[new-osx-cctools]') != true)
      run: |
        dir=$PWD
        cd $VCPKG_INSTALLATION_ROOT
        7z x $dir/installed_x64-osx-cctools.7z -aos
        cd $dir
        rm -f installed_x64-osx-cctools.7z
    - name: Fix openal-soft framework paths
      shell: bash
      run: |
        rm ./ports/openal-soft/portfile.cmake
        mv ./ports/openal-soft/portfile-cctools.cmake ./ports/openal-soft/portfile.cmake
    - name: Upgrade vcpkg dependencies
      run: |
        PATH=/opt/cctools/bin:$PATH vcpkg upgrade --no-dry-run
    - name: Build patched Irrlicht 1.9
      if: (contains(github.event.head_commit.message, '[do-irr]') || contains(github.event.head_commit.message, '[new]') || contains(github.event.head_commit.message, '[new-osx-cctools]'))
      run: |
        curl --retry 5 --connect-timeout 30 --location --remote-header-name --remote-name \
          https://github.com/edo9300/irrlicht1-8-4/archive/1.9-custom.zip
        7z x irrlicht1-8-4-1.9-custom.zip
        cd irrlicht1-8-4-1.9-custom
        rm source/Irrlicht/Makefile
        mv ../irrlicht-cctools-makefile source/Irrlicht/Makefile
        #When building with cctools it doesn't like that a cpp file uses obj c features
        mv source/Irrlicht/Irrlicht.cpp source/Irrlicht/Irrlicht.mm
        mv source/Irrlicht/COSOperator.cpp source/Irrlicht/COSOperator.mm
        rm -r -f $VCPKG_INSTALLATION_ROOT/installed/x64-osx/include/irrlicht
        mkdir -p $VCPKG_INSTALLATION_ROOT/installed/x64-osx/include
        mkdir -p $VCPKG_INSTALLATION_ROOT/installed/x64-osx/lib
        mkdir -p $VCPKG_INSTALLATION_ROOT/installed/x64-osx/debug/lib
        make -Csource/Irrlicht staticlib_osx NDEBUG=1 -j2
        cp -r include $VCPKG_INSTALLATION_ROOT/installed/x64-osx/include/irrlicht
        cp lib/MacOSX/libIrrlicht.a $VCPKG_INSTALLATION_ROOT/installed/x64-osx/lib
        make -Csource/Irrlicht staticlib_osx NDEBUG=1 clean
        make -Csource/Irrlicht staticlib_osx -j2
        cp lib/MacOSX/libIrrlicht.a $VCPKG_INSTALLATION_ROOT/installed/x64-osx/debug/lib
    - name: Install vcpkg dependencies
      run: |
        PATH=/opt/cctools/bin:$PATH vcpkg install \
          liblzma libevent openssl libgit2 \
          freetype[bzip2,core,png,zlib] \
          openal-soft \
          curl sqlite3 \
          libflac libvorbis \
          fmt nlohmann-json \
          discord-rpc-payload
    - name: 7-Zip binaries
      run: |
        cd $VCPKG_INSTALLATION_ROOT
        7z a installed_x64-osx-cctools.7z installed
    - name: Get upload endpoint
      id: get_endpoint
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o latest.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases/latest
        echo ::set-output name=upload_url::$(node -e "console.log(JSON.parse(require('fs').readFileSync('./latest.json'))['upload_url'])")
        echo ::set-output name=asset_path::$VCPKG_INSTALLATION_ROOT/installed_x64-osx-cctools.7z
    - name: Upload binaries to GitHub
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_endpoint.outputs.upload_url }}
        asset_path: ${{ steps.get_endpoint.outputs.asset_path }}
        asset_name: installed_x64-osx-cctools.7z
        asset_content_type: application/x-7z-compressed

  aarch64-osx-cctools:
    runs-on: ubuntu-latest
    needs: create-release
    if: contains(github.event.head_commit.message, '[skip-osx64-cctools]') != true
    env:
      CC: /opt/cctools/bin/arm64-macosx-clang
      CXX: /opt/cctools/bin/arm64-macosx-clang++
      AR: /opt/cctools/bin/arm-apple-darwin11-ar
      VCPKG_DEFAULT_TRIPLET: arm64-osx-cctools
      VCPKG_OVERLAY_TRIPLETS: triplets
      VCPKG_OVERLAY_PORTS: ports
    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 1
    - name: Download cctools
      run: |
        cd /opt
        wget https://github.com/edo9300/cctools-build/releases/download/preview/cctools.tar.xz
        tar xf cctools.tar.xz
        cd cctools/bin
        ln x86_64-apple-darwin11-lipo -s lipo
        ln llvm-install-name-tool -s install_name_tool
    - name: Download 1-latest release's json
      shell: bash
      if: (startsWith(github.ref, 'refs/tags/') && contains(github.event.head_commit.message, '[new]') != true && contains(github.event.head_commit.message, '[new-osx64-cctools]') != true)
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o tmp.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases
        echo "$(node -e "console.log(JSON.stringify(JSON.parse(require('fs').readFileSync('./tmp.json'))[1]))")" >> previous.json
        rm -f tmp.json
    - name: Download latest release's json
      shell: bash
      if: (startsWith(github.ref, 'refs/tags/') != true && contains(github.event.head_commit.message, '[new]') != true && contains(github.event.head_commit.message, '[new-osx64-cctools]') != true)
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o previous.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases/latest
    - name: Download cached archive
      shell: bash
      if: (contains(github.event.head_commit.message, '[new]') != true && contains(github.event.head_commit.message, '[new-osx64-cctools]') != true)
      run: |
        curl -O -J -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/octet-stream" "$(node -e "JSON.parse(require('fs').readFileSync('./previous.json'))['assets'].forEach(function(obj){if(obj['name']=='installed_aarch64-osx-cctools.7z'){ console.log(obj['url']) }})")"
    - name: Fix openal-soft framework paths
      shell: bash
      run: |
        rm ./ports/openal-soft/portfile.cmake
        mv ./ports/openal-soft/portfile-cctools.cmake ./ports/openal-soft/portfile.cmake
    - name: Extract vcpkg cache
      if: (contains(github.event.head_commit.message, '[new]') != true && contains(github.event.head_commit.message, '[new-osx64-cctools]') != true)
      run: |
        dir=$PWD
        cd $VCPKG_INSTALLATION_ROOT
        7z x $dir/installed_aarch64-osx-cctools.7z -aos
        cd $dir
        rm -f installed_aarch64-osx-cctools.7z
    - name: Upgrade vcpkg dependencies
      run: |
        PATH=/opt/cctools/bin:$PATH vcpkg upgrade --no-dry-run
    - name: Build patched Irrlicht 1.9
      if: (contains(github.event.head_commit.message, '[do-irr]') || contains(github.event.head_commit.message, '[new]') || contains(github.event.head_commit.message, '[new-osx64-cctools]'))
      run: |
        curl --retry 5 --connect-timeout 30 --location --remote-header-name --remote-name \
          https://github.com/edo9300/irrlicht1-8-4/archive/1.9-custom.zip
        7z x irrlicht1-8-4-1.9-custom.zip
        cd irrlicht1-8-4-1.9-custom
        rm source/Irrlicht/Makefile
        mv ../irrlicht-cctools-makefile source/Irrlicht/Makefile
        #When building with cctools it doesn't like that a cpp file uses obj c features
        mv source/Irrlicht/Irrlicht.cpp source/Irrlicht/Irrlicht.mm
        mv source/Irrlicht/COSOperator.cpp source/Irrlicht/COSOperator.mm
        rm -r -f $VCPKG_INSTALLATION_ROOT/installed/arm64-osx/include/irrlicht
        mkdir -p $VCPKG_INSTALLATION_ROOT/installed/arm64-osx/include
        mkdir -p $VCPKG_INSTALLATION_ROOT/installed/arm64-osx/lib
        mkdir -p $VCPKG_INSTALLATION_ROOT/installed/arm64-osx/debug/lib
        make -Csource/Irrlicht staticlib_osx NDEBUG=1 -j2
        cp -r include $VCPKG_INSTALLATION_ROOT/installed/arm64-osx/include/irrlicht
        cp lib/MacOSX/libIrrlicht.a $VCPKG_INSTALLATION_ROOT/installed/arm64-osx/lib
        make -Csource/Irrlicht staticlib_osx NDEBUG=1 clean
        make -Csource/Irrlicht staticlib_osx -j2
        cp lib/MacOSX/libIrrlicht.a $VCPKG_INSTALLATION_ROOT/installed/arm64-osx/debug/lib
    - name: Install vcpkg dependencies
      run: |
        PATH=/opt/cctools/bin:$PATH vcpkg install \
          liblzma libevent openssl libgit2 \
          freetype[bzip2,core,png,zlib] \
          openal-soft \
          curl sqlite3 \
          libflac libvorbis \
          fmt nlohmann-json \
          discord-rpc-payload
    - name: 7-Zip binaries
      run: |
        cd $VCPKG_INSTALLATION_ROOT
        7z a installed_aarch64-osx-cctools.7z installed
    - name: Get upload endpoint
      id: get_endpoint
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o latest.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases/latest
        echo ::set-output name=upload_url::$(node -e "console.log(JSON.parse(require('fs').readFileSync('./latest.json'))['upload_url'])")
        echo ::set-output name=asset_path::$VCPKG_INSTALLATION_ROOT/installed_aarch64-osx-cctools.7z
    - name: Upload binaries to GitHub
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_endpoint.outputs.upload_url }}
        asset_path: ${{ steps.get_endpoint.outputs.asset_path }}
        asset_name: installed_aarch64-osx-cctools.7z
        asset_content_type: application/x-7z-compressed

  x64-osx-lastsdk:
    runs-on: macos-11
    needs: create-release
    if: contains(github.event.head_commit.message, '[skip-osx-sdk]') != true
    env:
      DEVELOPER_DIR: /Applications/Xcode_13.2.1.app/Contents/Developer
      MACOSX_DEPLOYMENT_TARGET: 10.11
    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 1
    - name: Download 1-latest release's json
      shell: bash
      if: (startsWith(github.ref, 'refs/tags/') && contains(github.event.head_commit.message, '[new]') != true && contains(github.event.head_commit.message, '[new-osx-sdk]') != true)
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o tmp.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases
        echo "$(node -e "console.log(JSON.stringify(JSON.parse(require('fs').readFileSync('./tmp.json'))[1]))")" >> previous.json
        rm -f tmp.json
    - name: Download latest release's json
      shell: bash
      if: (startsWith(github.ref, 'refs/tags/') != true && contains(github.event.head_commit.message, '[new]') != true && contains(github.event.head_commit.message, '[new-osx-sdk]') != true)
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o previous.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases/latest
    - name: Download cached archive
      shell: bash
      if: (contains(github.event.head_commit.message, '[new]') != true && contains(github.event.head_commit.message, '[new-osx-sdk]') != true)
      run: |
        curl -O -J -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/octet-stream" "$(node -e "JSON.parse(require('fs').readFileSync('./previous.json'))['assets'].forEach(function(obj){if(obj['name']=='installed_x64-osx.7z'){ console.log(obj['url']) }})")"
    #needed to build mpg123
    # - name: Install Homebrew prerequisites
      # run: |
        # brew install yasm
    - name: Extract vcpkg cache
      if: (contains(github.event.head_commit.message, '[new]') != true && contains(github.event.head_commit.message, '[new-osx-sdk]') != true)
      run: |
        dir=$PWD
        cd $VCPKG_INSTALLATION_ROOT
        7z x $dir/installed_x64-osx.7z -aos
        cd $dir
        rm -f installed_x64-osx.7z
    - name: Upgrade vcpkg dependencies
      run: |
        vcpkg upgrade --overlay-ports=ports --no-dry-run
    - name: Build patched Irrlicht 1.9
      if: (contains(github.event.head_commit.message, '[do-irr]') || contains(github.event.head_commit.message, '[new]') || contains(github.event.head_commit.message, '[new-osx-sdk]'))
      env:
        SDKROOT: /Applications/Xcode_13.2.1.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk
      run: |
        curl --retry 5 --connect-timeout 30 --location --remote-header-name --remote-name \
          https://github.com/edo9300/irrlicht1-8-4/archive/1.9-custom.zip
        7z x irrlicht1-8-4-1.9-custom.zip
        cd irrlicht1-8-4-1.9-custom
        xcodebuild -project source/Irrlicht/Irrlicht.xcodeproj -configuration Release -target Irrlicht_OSX SYMROOT=build -sdk $SDKROOT -parallelizeTargets
        rm -r -f $VCPKG_INSTALLATION_ROOT/installed/x64-osx/include/irrlicht
        mkdir -p $VCPKG_INSTALLATION_ROOT/installed/x64-osx/include
        mkdir -p $VCPKG_INSTALLATION_ROOT/installed/x64-osx/lib
        mkdir -p $VCPKG_INSTALLATION_ROOT/installed/x64-osx/debug/lib
        cp -r include $VCPKG_INSTALLATION_ROOT/installed/x64-osx/include/irrlicht
        cp source/Irrlicht/build/Release/libIrrlicht.a $VCPKG_INSTALLATION_ROOT/installed/x64-osx/lib
        cp source/Irrlicht/build/Release/libIrrlicht.a $VCPKG_INSTALLATION_ROOT/installed/x64-osx/debug/lib
    - name: Install vcpkg dependencies
      run: |
        vcpkg install --overlay-ports=ports \
          liblzma libevent openssl libgit2 \
          freetype[bzip2,core,png,zlib] \
          openal-soft \
          curl sqlite3 \
          libflac libvorbis \
          fmt nlohmann-json \
          discord-rpc-payload
    - name: 7-Zip binaries
      run: |
        cd $VCPKG_INSTALLATION_ROOT
        7z a installed_x64-osx-last-sdk.7z installed
    - name: Get upload endpoint
      id: get_endpoint
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o latest.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases/latest
        echo ::set-output name=upload_url::$(node -e "console.log(JSON.parse(require('fs').readFileSync('./latest.json'))['upload_url'])")
        echo ::set-output name=asset_path::$VCPKG_INSTALLATION_ROOT/installed_x64-osx-last-sdk.7z
    - name: Upload binaries to GitHub
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_endpoint.outputs.upload_url }}
        asset_path: ${{ steps.get_endpoint.outputs.asset_path }}
        asset_name: installed_x64-osx-last-sdk.7z
        asset_content_type: application/x-7z-compressed

  aarch64-osx:
    runs-on: macos-latest
    needs: create-release
    if: contains(github.event.head_commit.message, '[skip-osx64]') != true
    env:
      MACOSX_DEPLOYMENT_TARGET: 11.0
    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 1
    - name: Download 1-latest release's json
      shell: bash
      if: (startsWith(github.ref, 'refs/tags/') && contains(github.event.head_commit.message, '[new]') != true && contains(github.event.head_commit.message, '[new-osx64]') != true)
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o tmp.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases
        echo "$(node -e "console.log(JSON.stringify(JSON.parse(require('fs').readFileSync('./tmp.json'))[1]))")" >> previous.json
        rm -f tmp.json
    - name: Download latest release's json
      shell: bash
      if: (startsWith(github.ref, 'refs/tags/') != true && contains(github.event.head_commit.message, '[new]') != true && contains(github.event.head_commit.message, '[new-osx64]') != true)
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o previous.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases/latest
    - name: Download cached archive
      shell: bash
      if: (contains(github.event.head_commit.message, '[new]') != true && contains(github.event.head_commit.message, '[new-osx64]') != true)
      run: |
        curl -O -J -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/octet-stream" "$(node -e "JSON.parse(require('fs').readFileSync('./previous.json'))['assets'].forEach(function(obj){if(obj['name']=='installed_aarch64-osx.7z'){ console.log(obj['url']) }})")"
    #needed to build mpg123
    # - name: Install Homebrew prerequisites
      # if: contains(github.event.head_commit.message, '[skip-osx]') != true
      # run: |
        # brew install yasm
    - name: Extract vcpkg cache
      if: (contains(github.event.head_commit.message, '[new]') != true && contains(github.event.head_commit.message, '[new-osx64]') != true)
      run: |
        dir=$PWD
        cd $VCPKG_INSTALLATION_ROOT
        7z x $dir/installed_aarch64-osx.7z -aos
        cd $dir
        rm -f installed_aarch64-osx.7z
    - name: Upgrade vcpkg dependencies
      run: |
        vcpkg upgrade --overlay-ports=ports --no-dry-run --triplet=arm64-osx
    - name: Build patched Irrlicht 1.9
      if: (contains(github.event.head_commit.message, '[do-irr]') || contains(github.event.head_commit.message, '[new]') || contains(github.event.head_commit.message, '[new-osx64]'))
      env:
        SDKROOT: /Applications/Xcode_13.2.1.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk
      run: |
        curl --retry 5 --connect-timeout 30 --location --remote-header-name --remote-name \
          https://github.com/edo9300/irrlicht1-8-4/archive/1.9-custom.zip
        7z x irrlicht1-8-4-1.9-custom.zip
        cd irrlicht1-8-4-1.9-custom
        xcodebuild ARCHS=arm64 ONLY_ACTIVE_ARCH=NO -project source/Irrlicht/Irrlicht.xcodeproj -configuration Release -target Irrlicht_OSX SYMROOT=build -sdk $SDKROOT -parallelizeTargets
        rm -r -f $VCPKG_INSTALLATION_ROOT/installed/arm64-osx/include/irrlicht
        mkdir -p $VCPKG_INSTALLATION_ROOT/installed/arm64-osx/include
        mkdir -p $VCPKG_INSTALLATION_ROOT/installed/arm64-osx/lib
        mkdir -p $VCPKG_INSTALLATION_ROOT/installed/arm64-osx/debug/lib
        cp -r include $VCPKG_INSTALLATION_ROOT/installed/arm64-osx/include/irrlicht
        cp source/Irrlicht/build/Release/libIrrlicht.a $VCPKG_INSTALLATION_ROOT/installed/arm64-osx/lib
        cp source/Irrlicht/build/Release/libIrrlicht.a $VCPKG_INSTALLATION_ROOT/installed/arm64-osx/debug/lib
    - name: Install vcpkg dependencies
      run: |
        vcpkg install --overlay-ports=ports \
          liblzma libevent openssl libgit2 \
          freetype[bzip2,core,png,zlib] \
          openal-soft \
          curl sqlite3 \
          libflac libvorbis \
          fmt nlohmann-json \
          discord-rpc-payload \
          --triplet=arm64-osx
    - name: 7-Zip binaries
      run: |
        cd $VCPKG_INSTALLATION_ROOT
        7z a installed_aarch64-osx.7z installed
    - name: Get upload endpoint
      id: get_endpoint
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o latest.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases/latest
        echo ::set-output name=upload_url::$(node -e "console.log(JSON.parse(require('fs').readFileSync('./latest.json'))['upload_url'])")
        echo ::set-output name=asset_path::$VCPKG_INSTALLATION_ROOT/installed_aarch64-osx.7z
    - name: Upload binaries to GitHub
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_endpoint.outputs.upload_url }}
        asset_path: ${{ steps.get_endpoint.outputs.asset_path }}
        asset_name: installed_aarch64-osx.7z
        asset_content_type: application/x-7z-compressed

  x64-linux:
    runs-on: ubuntu-18.04
    needs: create-release
    if: contains(github.event.head_commit.message, '[skip-linux]') != true
    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 1
    - name: Install APT prerequisities
      run: |
        sudo apt-get update
        sudo apt-get install -y yasm libgl1-mesa-dev libasound2-dev libpulse-dev libwayland-dev libxkbcommon-dev
    - name: Download 1-latest release's json
      if: (startsWith(github.ref, 'refs/tags/') && contains(github.event.head_commit.message, '[new]') != true && contains(github.event.head_commit.message, '[new-linux]') != true)
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o tmp.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases
        echo "$(node -e "console.log(JSON.stringify(JSON.parse(require('fs').readFileSync('./tmp.json'))[1]))")" >> previous.json
        rm -f tmp.json
    - name: Download latest release's json
      if: (startsWith(github.ref, 'refs/tags/') != true && contains(github.event.head_commit.message, '[new]') != true && contains(github.event.head_commit.message, '[new-linux]') != true)
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o previous.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases/latest
    - name: Download cached archive
      if: (contains(github.event.head_commit.message, '[new]') != true && contains(github.event.head_commit.message, '[new-linux]') != true)
      run: |
        curl -O -J -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/octet-stream" "$(node -e "JSON.parse(require('fs').readFileSync('./previous.json'))['assets'].forEach(function(obj){if(obj['name']=='installed_x64-linux.7z'){ console.log(obj['url']) }})")"
    - name: Extract vcpkg cache
      if: (contains(github.event.head_commit.message, '[new]') != true && contains(github.event.head_commit.message, '[new-linux]') != true)
      run: |
        dir=$PWD
        cd $VCPKG_INSTALLATION_ROOT
        7z x $dir/installed_x64-linux.7z -aos
        cd $dir
        rm -f installed_x64-linux.7z
    - name: Upgrade vcpkg dependencies
      run: |
        vcpkg upgrade --overlay-ports=ports --no-dry-run
    - name: Install vcpkg dependencies
      run: |
        vcpkg install --overlay-ports=ports \
          liblzma libevent sqlite3 \
          irrlicht-rectclip \
          freetype[bzip2,core,png,zlib] \
          curl openssl libgit2 fmt nlohmann-json \
          openal-soft \
          libflac libvorbis \
          discord-rpc-payload
    - name: 7-Zip binaries
      run: |
        cd $VCPKG_INSTALLATION_ROOT
        7z a installed_x64-linux.7z installed scripts .vcpkg-root
    - name: Get upload endpoint
      id: get_endpoint
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o latest.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases/latest
        echo ::set-output name=upload_url::$(node -e "console.log(JSON.parse(require('fs').readFileSync('./latest.json'))['upload_url'])")
        echo ::set-output name=asset_path::$VCPKG_INSTALLATION_ROOT/installed_x64-linux.7z
    - name: Upload binaries to GitHub
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_endpoint.outputs.upload_url }}
        asset_path: ${{ steps.get_endpoint.outputs.asset_path }}
        asset_name: installed_x64-linux.7z
        asset_content_type: application/x-7z-compressed

  aarch64-linux:
    runs-on: ubuntu-18.04
    needs: create-release
    if: contains(github.event.head_commit.message, '[skip-linux64]') != true
    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 1
    - name: Install APT prerequisities
      run: |
        sudo apt-get update
        sudo apt-get install -y yasm libgl1-mesa-dev libasound2-dev libpulse-dev libwayland-dev libxkbcommon-dev gcc-aarch64-linux-gnu g++-aarch64-linux-gnu binutils-aarch64-linux-gnu
    - name: Download 1-latest release's json
      if: (startsWith(github.ref, 'refs/tags/') && contains(github.event.head_commit.message, '[new]') != true && contains(github.event.head_commit.message, '[new-linux64]') != true)
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o tmp.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases
        echo "$(node -e "console.log(JSON.stringify(JSON.parse(require('fs').readFileSync('./tmp.json'))[1]))")" >> previous.json
        rm -f tmp.json
    - name: Download latest release's json
      if: (startsWith(github.ref, 'refs/tags/') != true && contains(github.event.head_commit.message, '[new]') != true && contains(github.event.head_commit.message, '[new-linux64]') != true)
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o previous.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases/latest
    - name: Download cached archive
      if: (contains(github.event.head_commit.message, '[new]') != true && contains(github.event.head_commit.message, '[new-linux64]') != true)
      run: |
        curl -O -J -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/octet-stream" "$(node -e "JSON.parse(require('fs').readFileSync('./previous.json'))['assets'].forEach(function(obj){if(obj['name']=='installed_aarch64-linux.7z'){ console.log(obj['url']) }})")"
    - name: Extract vcpkg cache
      if: (contains(github.event.head_commit.message, '[new]') != true && contains(github.event.head_commit.message, '[new-linux64]') != true)
      run: |
        dir=$PWD
        cd $VCPKG_INSTALLATION_ROOT
        7z x $dir/installed_aarch64-linux.7z -aos
        cd $dir
        rm -f installed_aarch64-linux.7z
    - name: Upgrade vcpkg dependencies
      run: |
        vcpkg upgrade --overlay-ports=ports --no-dry-run --triplet=arm64-linux
    - name: Install vcpkg dependencies
      run: |
        vcpkg install --overlay-ports=ports \
          liblzma libevent sqlite3 \
          irrlicht-rectclip \
          freetype[bzip2,core,png,zlib] \
          curl openssl libgit2 fmt nlohmann-json \
          openal-soft \
          libflac libvorbis \
          discord-rpc-payload \
          --triplet=arm64-linux
    - name: 7-Zip binaries
      run: |
        cd $VCPKG_INSTALLATION_ROOT
        7z a installed_aarch64-linux.7z installed scripts .vcpkg-root
    - name: Get upload endpoint
      id: get_endpoint
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o latest.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases/latest
        echo ::set-output name=upload_url::$(node -e "console.log(JSON.parse(require('fs').readFileSync('./latest.json'))['upload_url'])")
        echo ::set-output name=asset_path::$VCPKG_INSTALLATION_ROOT/installed_aarch64-linux.7z
    - name: Upload binaries to GitHub
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_endpoint.outputs.upload_url }}
        asset_path: ${{ steps.get_endpoint.outputs.asset_path }}
        asset_name: installed_aarch64-linux.7z
        asset_content_type: application/x-7z-compressed
  passthroughs:
    runs-on: ubuntu-latest
    needs: create-release
    if: ((contains(github.event.head_commit.message, '[skip-win]')
        || contains(github.event.head_commit.message, '[skip-win15]')
        || contains(github.event.head_commit.message, '[skip-win17]')
        || contains(github.event.head_commit.message, '[skip-win19]')
        || contains(github.event.head_commit.message, '[skip-win22]')
        || contains(github.event.head_commit.message, '[skip-osx]')
        || contains(github.event.head_commit.message, '[skip-osx64]')
        || contains(github.event.head_commit.message, '[skip-linux]')
        || contains(github.event.head_commit.message, '[skip-linux64]'))
        && startsWith(github.ref, 'refs/tags/'))
    steps:
    - name: Download 1-latest release's json
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o tmp.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases
        echo "$(node -e "console.log(JSON.stringify(JSON.parse(require('fs').readFileSync('./tmp.json'))[1]))")" >> previous.json
        rm -f tmp.json
    - name: Get upload endpoint
      id: get_endpoint
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o latest.json https://api.github.com/repos/edo9300/edopro-vcpkg-cache/releases/latest
        echo ::set-output name=upload_url::$(node -e "console.log(JSON.parse(require('fs').readFileSync('./latest.json'))['upload_url'])")
    - name: Download cached archive linux
      if: contains(github.event.head_commit.message, '[skip-linux]')
      run: |
        curl -O -J -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/octet-stream" "$(node -e "JSON.parse(require('fs').readFileSync('./previous.json'))['assets'].forEach(function(obj){if(obj['name']=='installed_x64-linux.7z'){ console.log(obj['url']) }})")"
    - name: Upload binaries to GitHub linux
      if: contains(github.event.head_commit.message, '[skip-linux]')
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_endpoint.outputs.upload_url }}
        asset_path: ./installed_x64-linux.7z
        asset_name: installed_x64-linux.7z
        asset_content_type: application/x-7z-compressed
    - name: Download cached archive linux64
      if: contains(github.event.head_commit.message, '[skip-linux64]')
      run: |
        curl -O -J -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/octet-stream" "$(node -e "JSON.parse(require('fs').readFileSync('./previous.json'))['assets'].forEach(function(obj){if(obj['name']=='installed_aarch64-linux.7z'){ console.log(obj['url']) }})")"
    - name: Upload binaries to GitHub linux64
      if: contains(github.event.head_commit.message, '[skip-linux64]')
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_endpoint.outputs.upload_url }}
        asset_path: ./installed_aarch64-linux.7z
        asset_name: installed_aarch64-linux.7z
        asset_content_type: application/x-7z-compressed
    - name: Download cached archive osx
      if: contains(github.event.head_commit.message, '[skip-osx]')
      run: |
        curl -O -J -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/octet-stream" "$(node -e "JSON.parse(require('fs').readFileSync('./previous.json'))['assets'].forEach(function(obj){if(obj['name']=='installed_x64-osx.7z'){ console.log(obj['url']) }})")"
    - name: Upload binaries to GitHub osx
      if: contains(github.event.head_commit.message, '[skip-osx]')
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_endpoint.outputs.upload_url }}
        asset_path: ./installed_x64-osx.7z
        asset_name: installed_x64-osx.7z
        asset_content_type: application/zip
    - name: Download cached archive osx cctools
      if: contains(github.event.head_commit.message, '[skip-osx-cctools]')
      run: |
        curl -O -J -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/octet-stream" "$(node -e "JSON.parse(require('fs').readFileSync('./previous.json'))['assets'].forEach(function(obj){if(obj['name']=='installed_x64-osx-cctools.7z'){ console.log(obj['url']) }})")"
    - name: Upload binaries to GitHub osx cctools
      if: contains(github.event.head_commit.message, '[skip-osx-cctools]')
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_endpoint.outputs.upload_url }}
        asset_path: ./installed_x64-osx-cctools.7z
        asset_name: installed_x64-osx-cctools.7z
        asset_content_type: application/zip
    - name: Download cached archive osx last sdk
      if: contains(github.event.head_commit.message, '[skip-osx-sdk]')
      run: |
        curl -O -J -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/octet-stream" "$(node -e "JSON.parse(require('fs').readFileSync('./previous.json'))['assets'].forEach(function(obj){if(obj['name']=='installed_x64-osx-last-sdk.7z'){ console.log(obj['url']) }})")"
    - name: Upload binaries to GitHub osx last sdk
      if: contains(github.event.head_commit.message, '[skip-osx-sdk]')
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_endpoint.outputs.upload_url }}
        asset_path: ./installed_x64-osx-last-sdk.7z
        asset_name: installed_x64-osx-last-sdk.7z
        asset_content_type: application/zip
    - name: Download cached archive osx64
      if: contains(github.event.head_commit.message, '[skip-osx64]')
      run: |
        curl -O -J -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/octet-stream" "$(node -e "JSON.parse(require('fs').readFileSync('./previous.json'))['assets'].forEach(function(obj){if(obj['name']=='installed_aarch64-osx.7z'){ console.log(obj['url']) }})")"
    - name: Upload binaries to GitHub osx64
      if: contains(github.event.head_commit.message, '[skip-osx64]')
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_endpoint.outputs.upload_url }}
        asset_path: ./installed_aarch64-osx.7z
        asset_name: installed_aarch64-osx.7z
        asset_content_type: application/zip
    - name: Download cached archive osx64 cctools
      if: contains(github.event.head_commit.message, '[skip-osx64-cctools]')
      run: |
        curl -O -J -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/octet-stream" "$(node -e "JSON.parse(require('fs').readFileSync('./previous.json'))['assets'].forEach(function(obj){if(obj['name']=='installed_aarch64-osx-cctools.7z'){ console.log(obj['url']) }})")"
    - name: Upload binaries to GitHub osx64 cctools
      if: contains(github.event.head_commit.message, '[skip-osx64-cctools]')
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_endpoint.outputs.upload_url }}
        asset_path: ./installed_aarch64-osx-cctools.7z
        asset_name: installed_aarch64-osx-cctools.7z
        asset_content_type: application/zip
    - name: Download cached archive vs2015
      if: contains(github.event.head_commit.message, '[skip-win15]')
      run: |
        curl -O -J -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/octet-stream" "$(node -e "JSON.parse(require('fs').readFileSync('./previous.json'))['assets'].forEach(function(obj){if(obj['name']=='installed_x86-windows-static-vs2015.zip'){ console.log(obj['url']) }})")"
    - name: Upload binaries to GitHub vs2015
      if: contains(github.event.head_commit.message, '[skip-win15]')
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_endpoint.outputs.upload_url }}
        asset_path: ./installed_x86-windows-static-vs2015.zip
        asset_name: installed_x86-windows-static-vs2015.zip
        asset_content_type: application/zip
    - name: Download cached archive vs2017
      if: contains(github.event.head_commit.message, '[skip-win17]')
      run: |
        curl -O -J -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/octet-stream" "$(node -e "JSON.parse(require('fs').readFileSync('./previous.json'))['assets'].forEach(function(obj){if(obj['name']=='installed_x86-windows-static-vs2017.zip'){ console.log(obj['url']) }})")"
    - name: Upload binaries to GitHub vs2017
      if: contains(github.event.head_commit.message, '[skip-win17]')
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_endpoint.outputs.upload_url }}
        asset_path: ./installed_x86-windows-static-vs2017.zip
        asset_name: installed_x86-windows-static-vs2017.zip
        asset_content_type: application/zip
    - name: Download cached archive vs2017_xp
      if: contains(github.event.head_commit.message, '[skip-win]')
      run: |
        curl -O -J -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/octet-stream" "$(node -e "JSON.parse(require('fs').readFileSync('./previous.json'))['assets'].forEach(function(obj){if(obj['name']=='installed_x86-windows-static.zip'){ console.log(obj['url']) }})")"
    - name: Upload binaries to GitHub vs2017_xp
      if: contains(github.event.head_commit.message, '[skip-win]')
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_endpoint.outputs.upload_url }}
        asset_path: ./installed_x86-windows-static.zip
        asset_name: installed_x86-windows-static.zip
        asset_content_type: application/zip
    - name: Download cached archive vs2019
      if: contains(github.event.head_commit.message, '[skip-win19]')
      run: |
        curl -O -J -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/octet-stream" "$(node -e "JSON.parse(require('fs').readFileSync('./previous.json'))['assets'].forEach(function(obj){if(obj['name']=='installed_x86-windows-static-vs2019.zip'){ console.log(obj['url']) }})")"
    - name: Upload binaries to GitHub vs2019
      if: contains(github.event.head_commit.message, '[skip-win19]')
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_endpoint.outputs.upload_url }}
        asset_path: ./installed_x86-windows-static-vs2019.zip
        asset_name: installed_x86-windows-static-vs2019.zip
        asset_content_type: application/zip
    - name: Download cached archive vs2022
      if: contains(github.event.head_commit.message, '[skip-win22]')
      run: |
        curl -O -J -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/octet-stream" "$(node -e "JSON.parse(require('fs').readFileSync('./previous.json'))['assets'].forEach(function(obj){if(obj['name']=='installed_x86-windows-static-vs2022.zip'){ console.log(obj['url']) }})")"
    - name: Upload binaries to GitHub vs2022
      if: contains(github.event.head_commit.message, '[skip-win22]')
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_endpoint.outputs.upload_url }}
        asset_path: ./installed_x86-windows-static-vs2022.zip
        asset_name: installed_x86-windows-static-vs2022.zip
        asset_content_type: application/zip

